
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000009c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023c3  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  00002fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130a  00000000  00000000  00003b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  00004ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095b  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d3  00000000  00000000  00005d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007166  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  8a:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
led_t pedestrian_green_led = {.portNumber = PORT_B, .pinNumber = 3};
led_t pedestrian_yellow_led = {.portNumber = PORT_B, .pinNumber = 4};
led_t pedestrian_red_led = {.portNumber = PORT_B, .pinNumber = 5};

void app_init() 
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <app_init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the button button and LEDs */
	button_t btn = { .portNumber = PORT_D, .pinNumber = 2 };
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8a 83       	std	Y+2, r24	; 0x02
	BUTTON_init(&btn);
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	0e 94 3a 01 	call	0x274	; 0x274 <BUTTON_init>
	
	LED_init(&cars_green_led);
  ac:	8a e6       	ldi	r24, 0x6A	; 106
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(&cars_yellow_led);
  b4:	88 e6       	ldi	r24, 0x68	; 104
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(&cars_red_led);
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>

	LED_init(&pedestrian_green_led);
  c4:	84 e6       	ldi	r24, 0x64	; 100
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(&pedestrian_yellow_led);
  cc:	82 e6       	ldi	r24, 0x62	; 98
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(&pedestrian_red_led);
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	/* Enable Global interrupt and External interrupt 0  */
	GLOBAL_INTERRUPT_ENABLE();
  dc:	8f b7       	in	r24, 0x3f	; 63
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8f bf       	out	0x3f, r24	; 63
	EXT_INT0_triggerControl(FALLING_EDGE);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 87 04 	call	0x90e	; 0x90e <EXT_INT0_triggerControl>
	EXT_INT0_ENABLE();
  e8:	8b b7       	in	r24, 0x3b	; 59
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	8b bf       	out	0x3b, r24	; 59
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <normalMode>:

void normalMode()
{
	
	/* FIRST state: Cars GREEN && Pedestrian RED are ON*/
	if (interrupt_triggered == 0 )
  f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  fc:	81 11       	cpse	r24, r1
  fe:	07 c0       	rjmp	.+14     	; 0x10e <normalMode+0x16>
	{
		leds_on_temporary_interruptCheck(&cars_green_led,&pedestrian_red_led, 5);
 100:	45 e0       	ldi	r20, 0x05	; 5
 102:	60 e6       	ldi	r22, 0x60	; 96
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	8a e6       	ldi	r24, 0x6A	; 106
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <leds_on_temporary_interruptCheck>
	}
	
	/* WHERE PEDESTRIAN MODE ENDS */ 
	interrupt_triggered = 0;
 10e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	
	/* SECOND STATE: Cars YELLOW BLINKS && Pedestrian RED still ON*/
	LED_on(&pedestrian_red_led);
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
	LED_blink_interruptCheck(&cars_yellow_led,5);			
 11a:	65 e0       	ldi	r22, 0x05	; 5
 11c:	88 e6       	ldi	r24, 0x68	; 104
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_blink_interruptCheck>
	LED_off(&pedestrian_red_led);
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>

	if (interrupt_triggered == 0) /* if interrupt happened in the above state, skip to the state where pedestrian mode ends */
 12c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 130:	81 11       	cpse	r24, r1
 132:	19 c0       	rjmp	.+50     	; 0x166 <normalMode+0x6e>
	{
		/* THIRD state: Cars RED && Pedestrian GREEN are ON */
		cars_red_flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cars_red_flag>
		leds_on_temporary_interruptCheck(&cars_red_led,&pedestrian_green_led, 5);				
 13a:	45 e0       	ldi	r20, 0x05	; 5
 13c:	64 e6       	ldi	r22, 0x64	; 100
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	86 e6       	ldi	r24, 0x66	; 102
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 79 02 	call	0x4f2	; 0x4f2 <leds_on_temporary_interruptCheck>
		cars_red_flag = 0;
 148:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <cars_red_flag>
		
		/* FOURTH state: Cars YELLOW BLINKS && Pedestrian RED is ON */ 
		if (interrupt_triggered == 0)
 14c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 150:	81 11       	cpse	r24, r1
 152:	09 c0       	rjmp	.+18     	; 0x166 <normalMode+0x6e>
		{
		LED_on(&pedestrian_red_led);								
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
		LED_blink_interruptCheck(&cars_yellow_led,5);
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	88 e6       	ldi	r24, 0x68	; 104
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_blink_interruptCheck>
 166:	08 95       	ret

00000168 <pedesterianMode>:
}

void pedesterianMode()
{
	/* if interrupt happens when Cars RED is ON */
	if (cars_red_flag == 1)
 168:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cars_red_flag>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	91 f4       	brne	.+36     	; 0x194 <pedesterianMode+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f e3       	ldi	r18, 0x3F	; 63
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <pedesterianMode+0xe>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <pedesterianMode+0x18>
 180:	00 00       	nop
	{	
		_delay_ms(5000);
		LED_off(&cars_red_led);
 182:	86 e6       	ldi	r24, 0x66	; 102
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
		LED_off(&pedestrian_green_led);
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
 192:	28 c0       	rjmp	.+80     	; 0x1e4 <pedesterianMode+0x7c>
	}
	else /* interrupt happens when Cars GREEN or YELLOW are ON*/
	{
		LED_off(&cars_green_led);
 194:	8a e6       	ldi	r24, 0x6A	; 106
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
		LED_off(&pedestrian_red_led);
 19c:	80 e6       	ldi	r24, 0x60	; 96
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
			
		/* BLINK both Cars && Pedestrian YELLOWS for 5 seconds*/
		blink_two_yellows(&cars_yellow_led,&pedestrian_yellow_led,5);
 1a4:	45 e0       	ldi	r20, 0x05	; 5
 1a6:	62 e6       	ldi	r22, 0x62	; 98
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	88 e6       	ldi	r24, 0x68	; 104
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 32 02 	call	0x464	; 0x464 <blink_two_yellows>
		
		/* then, SET cars RED && Pedestrian GREEN to ON state for 5 seconds*/
		LED_on(&pedestrian_green_led);
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
		LED_on(&cars_red_led);
 1ba:	86 e6       	ldi	r24, 0x66	; 102
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
 1c2:	2f e3       	ldi	r18, 0x3F	; 63
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <pedesterianMode+0x60>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <pedesterianMode+0x6a>
 1d2:	00 00       	nop
		_delay_ms(5000);
		LED_off(&pedestrian_green_led);
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
		LED_off(&cars_red_led);
 1dc:	86 e6       	ldi	r24, 0x66	; 102
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
	}
	
	/* for both conditions */ 
	/* BLINK both Cars && Pedestrian YELLOWS for 5 seconds */
	blink_two_yellows(&cars_yellow_led,&pedestrian_yellow_led,5);
 1e4:	45 e0       	ldi	r20, 0x05	; 5
 1e6:	62 e6       	ldi	r22, 0x62	; 98
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	88 e6       	ldi	r24, 0x68	; 104
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 32 02 	call	0x464	; 0x464 <blink_two_yellows>
	
	/* then, SET Cars GREEN && pedestrian RED to ON state for 5 seconds */
	LED_on(&pedestrian_red_led);
 1f2:	80 e6       	ldi	r24, 0x60	; 96
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
	LED_on(&cars_green_led);
 1fa:	8a e6       	ldi	r24, 0x6A	; 106
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_on>
 202:	2f e3       	ldi	r18, 0x3F	; 63
 204:	82 e4       	ldi	r24, 0x42	; 66
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <pedesterianMode+0xa0>
 210:	00 c0       	rjmp	.+0      	; 0x212 <pedesterianMode+0xaa>
 212:	00 00       	nop
	_delay_ms(5000);
	LED_off(&pedestrian_red_led);
 214:	80 e6       	ldi	r24, 0x60	; 96
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
	LED_off(&cars_green_led);	
 21c:	8a e6       	ldi	r24, 0x6A	; 106
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_off>
 224:	08 95       	ret

00000226 <__vector_1>:
}



ISR(INT0_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	/* Disable interrupt 0 till ISR is executed */
	pedesterianMode();
 248:	0e 94 b4 00 	call	0x168	; 0x168 <pedesterianMode>
	interrupt_triggered = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <BUTTON_init>:
 274:	fc 01       	movw	r30, r24
 276:	61 81       	ldd	r22, Z+1	; 0x01
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_init>
 280:	81 11       	cpse	r24, r1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret

00000286 <LED_init>:
		
	DIO_read(led->portNumber,led->pinNumber, state);
	
	/* return error_type  */
	return error_type;
}
 286:	fc 01       	movw	r30, r24
 288:	61 81       	ldd	r22, Z+1	; 0x01
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	80 81       	ld	r24, Z
 28e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_init>
 292:	81 11       	cpse	r24, r1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret

00000298 <check_initilization>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	1f 92       	push	r1
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	fc 01       	movw	r30, r24
 2a4:	21 81       	ldd	r18, Z+1	; 0x01
 2a6:	28 30       	cpi	r18, 0x08	; 8
 2a8:	10 f4       	brcc	.+4      	; 0x2ae <check_initilization+0x16>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <check_initilization+0x18>
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	19 82       	std	Y+1, r1	; 0x01
 2b2:	80 81       	ld	r24, Z
 2b4:	82 34       	cpi	r24, 0x42	; 66
 2b6:	01 f1       	breq	.+64     	; 0x2f8 <check_initilization+0x60>
 2b8:	18 f4       	brcc	.+6      	; 0x2c0 <check_initilization+0x28>
 2ba:	81 34       	cpi	r24, 0x41	; 65
 2bc:	39 f0       	breq	.+14     	; 0x2cc <check_initilization+0x34>
 2be:	5e c0       	rjmp	.+188    	; 0x37c <check_initilization+0xe4>
 2c0:	83 34       	cpi	r24, 0x43	; 67
 2c2:	81 f1       	breq	.+96     	; 0x324 <check_initilization+0x8c>
 2c4:	84 34       	cpi	r24, 0x44	; 68
 2c6:	09 f4       	brne	.+2      	; 0x2ca <check_initilization+0x32>
 2c8:	43 c0       	rjmp	.+134    	; 0x350 <check_initilization+0xb8>
 2ca:	58 c0       	rjmp	.+176    	; 0x37c <check_initilization+0xe4>
 2cc:	8a b3       	in	r24, 0x1a	; 26
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	ba 01       	movw	r22, r20
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <check_initilization+0x44>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <check_initilization+0x40>
 2e0:	48 2f       	mov	r20, r24
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	46 23       	and	r20, r22
 2e6:	57 23       	and	r21, r23
 2e8:	ba 01       	movw	r22, r20
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <check_initilization+0x58>
 2ec:	75 95       	asr	r23
 2ee:	67 95       	ror	r22
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <check_initilization+0x54>
 2f4:	69 83       	std	Y+1, r22	; 0x01
 2f6:	43 c0       	rjmp	.+134    	; 0x37e <check_initilization+0xe6>
 2f8:	87 b3       	in	r24, 0x17	; 23
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	ba 01       	movw	r22, r20
 300:	02 2e       	mov	r0, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <check_initilization+0x70>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <check_initilization+0x6c>
 30c:	48 2f       	mov	r20, r24
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	46 23       	and	r20, r22
 312:	57 23       	and	r21, r23
 314:	ba 01       	movw	r22, r20
 316:	02 c0       	rjmp	.+4      	; 0x31c <check_initilization+0x84>
 318:	75 95       	asr	r23
 31a:	67 95       	ror	r22
 31c:	2a 95       	dec	r18
 31e:	e2 f7       	brpl	.-8      	; 0x318 <check_initilization+0x80>
 320:	69 83       	std	Y+1, r22	; 0x01
 322:	2d c0       	rjmp	.+90     	; 0x37e <check_initilization+0xe6>
 324:	84 b3       	in	r24, 0x14	; 20
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	ba 01       	movw	r22, r20
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <check_initilization+0x9c>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <check_initilization+0x98>
 338:	48 2f       	mov	r20, r24
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	46 23       	and	r20, r22
 33e:	57 23       	and	r21, r23
 340:	ba 01       	movw	r22, r20
 342:	02 c0       	rjmp	.+4      	; 0x348 <check_initilization+0xb0>
 344:	75 95       	asr	r23
 346:	67 95       	ror	r22
 348:	2a 95       	dec	r18
 34a:	e2 f7       	brpl	.-8      	; 0x344 <check_initilization+0xac>
 34c:	69 83       	std	Y+1, r22	; 0x01
 34e:	17 c0       	rjmp	.+46     	; 0x37e <check_initilization+0xe6>
 350:	81 b3       	in	r24, 0x11	; 17
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	ba 01       	movw	r22, r20
 358:	02 2e       	mov	r0, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <check_initilization+0xc8>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <check_initilization+0xc4>
 364:	48 2f       	mov	r20, r24
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	46 23       	and	r20, r22
 36a:	57 23       	and	r21, r23
 36c:	ba 01       	movw	r22, r20
 36e:	02 c0       	rjmp	.+4      	; 0x374 <check_initilization+0xdc>
 370:	75 95       	asr	r23
 372:	67 95       	ror	r22
 374:	2a 95       	dec	r18
 376:	e2 f7       	brpl	.-8      	; 0x370 <check_initilization+0xd8>
 378:	69 83       	std	Y+1, r22	; 0x01
 37a:	01 c0       	rjmp	.+2      	; 0x37e <check_initilization+0xe6>
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	91 11       	cpse	r25, r1
 380:	05 c0       	rjmp	.+10     	; 0x38c <check_initilization+0xf4>
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	81 11       	cpse	r24, r1
 386:	04 c0       	rjmp	.+8      	; 0x390 <check_initilization+0xf8>
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	03 c0       	rjmp	.+6      	; 0x392 <check_initilization+0xfa>
 38c:	89 2f       	mov	r24, r25
 38e:	01 c0       	rjmp	.+2      	; 0x392 <check_initilization+0xfa>
 390:	89 2f       	mov	r24, r25
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <LED_on>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	8c 01       	movw	r16, r24
 3a2:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
 3a6:	c8 2f       	mov	r28, r24
 3a8:	81 11       	cpse	r24, r1
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <LED_on+0x1e>
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	f8 01       	movw	r30, r16
 3b0:	61 81       	ldd	r22, Z+1	; 0x01
 3b2:	80 81       	ld	r24, Z
 3b4:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
 3b8:	8c 2f       	mov	r24, r28
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <LED_off>:
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	8c 01       	movw	r16, r24
 3ca:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
 3ce:	c8 2f       	mov	r28, r24
 3d0:	81 11       	cpse	r24, r1
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <LED_off+0x1e>
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	f8 01       	movw	r30, r16
 3d8:	61 81       	ldd	r22, Z+1	; 0x01
 3da:	80 81       	ld	r24, Z
 3dc:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
 3e0:	8c 2f       	mov	r24, r28
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <LED_blink_interruptCheck>:

/*************************************************************************************************/
/*************************           LED_blink()          ****************************************/
/*************************************************************************************************/
EN_LED_error LED_blink_interruptCheck(led_t* led, uint8_t time_seconds)
{
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	8c 01       	movw	r16, r24
 3f6:	d6 2f       	mov	r29, r22
	/* create a variable to store the error type  */
	EN_LED_error error_type = LED_ok;
	
	/* check if pin is initialized as OUTPUT before operating */
	error_type = check_initilization(led);
 3f8:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
 3fc:	f8 2e       	mov	r15, r24
	
	/* if there is any error, don't do anything and return */
	if (error_type != LED_ok)
 3fe:	81 11       	cpse	r24, r1
 400:	2a c0       	rjmp	.+84     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	17 c0       	rjmp	.+46     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	
	/* we will toggle state 4 times a second, so the loop repeate 4*seconds */
	while (interval < 4*time_seconds)
	{
		/* if interrupt is triggered, turn off LED and return from function */
		if (interrupt_triggered == 1)
 406:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	39 f4       	brne	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			DIO_write(led->portNumber, led->pinNumber, LOW);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	f8 01       	movw	r30, r16
 412:	61 81       	ldd	r22, Z+1	; 0x01
 414:	80 81       	ld	r24, Z
 416:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
			return error_type;
 41a:	1d c0       	rjmp	.+58     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		}
		/* if not, toggle state and wait 0.25s, increase the iterator variable */
		DIO_toggle(led->portNumber, led->pinNumber);
 41c:	f8 01       	movw	r30, r16
 41e:	61 81       	ldd	r22, Z+1	; 0x01
 420:	80 81       	ld	r24, Z
 422:	0e 94 33 04 	call	0x866	; 0x866 <DIO_toggle>
 426:	83 e2       	ldi	r24, 0x23	; 35
 428:	94 ef       	ldi	r25, 0xF4	; 244
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
		_delay_ms(250);
		interval++;
 432:	cf 5f       	subi	r28, 0xFF	; 255
	
	/* create an iterator variable for the while loop */
	uint8_t interval  = 0;
	
	/* we will toggle state 4 times a second, so the loop repeate 4*seconds */
	while (interval < 4*time_seconds)
 434:	2c 2f       	mov	r18, r28
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	8d 2f       	mov	r24, r29
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	f4 f2       	brlt	.-68     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		DIO_toggle(led->portNumber, led->pinNumber);
		_delay_ms(250);
		interval++;
	}
	/* it time is up, turn off LED and return */
	DIO_write(led->portNumber, led->pinNumber, LOW);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	f8 01       	movw	r30, r16
 44e:	61 81       	ldd	r22, Z+1	; 0x01
 450:	80 81       	ld	r24, Z
 452:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	
	return error_type;
}
 456:	8f 2d       	mov	r24, r15
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	08 95       	ret

00000464 <blink_two_yellows>:
/*************************************************************************************************/
/*******************         blink_two_yellows()          ****************************************/
/*************************************************************************************************/
EN_LED_error blink_two_yellows(led_t* led1, led_t* led2, uint8_t time_seconds)
{
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	8b 01       	movw	r16, r22
 476:	d4 2e       	mov	r13, r20
	/* create a variable to store the error type  */
	EN_LED_error error_type = LED_ok;
	
	/* check if pin is initialized as OUTPUT before operating */
	error_type = check_initilization(led1);
 478:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
	/* if there is any error, don't do anything and return */
	if (error_type != LED_ok)
 47c:	81 11       	cpse	r24, r1
 47e:	31 c0       	rjmp	.+98     	; 0x4e2 <blink_two_yellows+0x7e>
		return error_type;
	
	/* check if pin is initialized as OUTPUT before operating */
	error_type = check_initilization(led2);
 480:	c8 01       	movw	r24, r16
 482:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
 486:	e8 2e       	mov	r14, r24
	/* if there is any error, don't do anything and return */
	if (error_type != LED_ok)
 488:	81 11       	cpse	r24, r1
 48a:	2b c0       	rjmp	.+86     	; 0x4e2 <blink_two_yellows+0x7e>
 48c:	f1 2c       	mov	r15, r1
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <blink_two_yellows+0x52>
	
	/* we will toggle state 2 times a second, so the loop repeate 2*seconds */
	while (interval < 2*time_seconds)
	{
		/* toggle LEDs every 0.5 seconds && increase iterator variable*/
		DIO_toggle(led1->portNumber, led1->pinNumber);
 490:	69 81       	ldd	r22, Y+1	; 0x01
 492:	88 81       	ld	r24, Y
 494:	0e 94 33 04 	call	0x866	; 0x866 <DIO_toggle>
		DIO_toggle(led2->portNumber, led2->pinNumber);
 498:	f8 01       	movw	r30, r16
 49a:	61 81       	ldd	r22, Z+1	; 0x01
 49c:	80 81       	ld	r24, Z
 49e:	0e 94 33 04 	call	0x866	; 0x866 <DIO_toggle>
 4a2:	ff e9       	ldi	r31, 0x9F	; 159
 4a4:	26 e8       	ldi	r18, 0x86	; 134
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	f1 50       	subi	r31, 0x01	; 1
 4aa:	20 40       	sbci	r18, 0x00	; 0
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <blink_two_yellows+0x44>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <blink_two_yellows+0x4e>
 4b2:	00 00       	nop
		_delay_ms(500);
		interval++;
 4b4:	f3 94       	inc	r15
		
	/* create an iterator variable for the while loop */
	uint8_t interval  = 0;
	
	/* we will toggle state 2 times a second, so the loop repeate 2*seconds */
	while (interval < 2*time_seconds)
 4b6:	4f 2d       	mov	r20, r15
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	2d 2d       	mov	r18, r13
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	42 17       	cp	r20, r18
 4c4:	53 07       	cpc	r21, r19
 4c6:	24 f3       	brlt	.-56     	; 0x490 <blink_two_yellows+0x2c>
		DIO_toggle(led2->portNumber, led2->pinNumber);
		_delay_ms(500);
		interval++;
	}
	/* after finishing, turn off LEDs and return */
	DIO_write(led1->portNumber, led1->pinNumber, LOW);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	69 81       	ldd	r22, Y+1	; 0x01
 4cc:	88 81       	ld	r24, Y
 4ce:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	DIO_write(led2->portNumber, led2->pinNumber, LOW);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	f8 01       	movw	r30, r16
 4d6:	61 81       	ldd	r22, Z+1	; 0x01
 4d8:	80 81       	ld	r24, Z
 4da:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	return error_type;
 4de:	8e 2d       	mov	r24, r14
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <blink_two_yellows+0x7e>
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	df 90       	pop	r13
 4f0:	08 95       	ret

000004f2 <leds_on_temporary_interruptCheck>:
/*************************************************************************************************/
/*******************         leds_on_temporary_interruptCheck()          *************************/
/*************************************************************************************************/
EN_LED_error leds_on_temporary_interruptCheck(led_t *led1, led_t *led2, uint8_t time_seconds)
{
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
 500:	8b 01       	movw	r16, r22
 502:	e4 2e       	mov	r14, r20
	/* create a variable to store the error type  */
	EN_LED_error error_type = LED_ok;
	
	/* check if pin is initialized as OUTPUT before operating */
	error_type = check_initilization(led1);
 504:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
	
	/* if there is any error, don't do anything and return */
	if (error_type != LED_ok)
 508:	81 11       	cpse	r24, r1
 50a:	49 c0       	rjmp	.+146    	; 0x59e <leds_on_temporary_interruptCheck+0xac>
		return error_type;
	
	/* check if pin is initialized as OUTPUT before operating */
	error_type = check_initilization(led2);
 50c:	c8 01       	movw	r24, r16
 50e:	0e 94 4c 01 	call	0x298	; 0x298 <check_initilization>
 512:	f8 2e       	mov	r15, r24
	
	/* if there is any error, don't do anything and return */
	if (error_type != LED_ok)
 514:	81 11       	cpse	r24, r1
 516:	43 c0       	rjmp	.+134    	; 0x59e <leds_on_temporary_interruptCheck+0xac>
	
	/* get the interrupt_triggered variable from app.c */
	extern uint8_t interrupt_triggered;
	
	/* turn on the required LEDs */
	DIO_write(led1->portNumber, led1->pinNumber, HIGH);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	69 81       	ldd	r22, Y+1	; 0x01
 51c:	88 81       	ld	r24, Y
 51e:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	DIO_write(led2->portNumber, led2->pinNumber, HIGH);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	f8 01       	movw	r30, r16
 526:	61 81       	ldd	r22, Z+1	; 0x01
 528:	80 81       	ld	r24, Z
 52a:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	
	/* create an iterator variable for the while loop */
	uint8_t interval = 0;
 52e:	40 e0       	ldi	r20, 0x00	; 0
	
	/* check for interrupt 10 times every second */
	while (interval < 10*time_seconds)
 530:	17 c0       	rjmp	.+46     	; 0x560 <leds_on_temporary_interruptCheck+0x6e>
	{
		/* if interrupt is triggered, turn off LEDs and return from function */
		if (interrupt_triggered == 1)
 532:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	61 f4       	brne	.+24     	; 0x552 <leds_on_temporary_interruptCheck+0x60>
		{
			DIO_write(led1->portNumber, led1->pinNumber, LOW);
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	69 81       	ldd	r22, Y+1	; 0x01
 53e:	88 81       	ld	r24, Y
 540:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
			DIO_write(led2->portNumber, led2->pinNumber, LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	f8 01       	movw	r30, r16
 548:	61 81       	ldd	r22, Z+1	; 0x01
 54a:	80 81       	ld	r24, Z
 54c:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
			return;
 550:	26 c0       	rjmp	.+76     	; 0x59e <leds_on_temporary_interruptCheck+0xac>
 552:	87 ea       	ldi	r24, 0xA7	; 167
 554:	91 e6       	ldi	r25, 0x61	; 97
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <leds_on_temporary_interruptCheck+0x64>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <leds_on_temporary_interruptCheck+0x6a>
 55c:	00 00       	nop
		}
		/* if not, wait 0.1s, increase the iterator variable */
		_delay_ms(100);
		interval++;
 55e:	4f 5f       	subi	r20, 0xFF	; 255
	
	/* create an iterator variable for the while loop */
	uint8_t interval = 0;
	
	/* check for interrupt 10 times every second */
	while (interval < 10*time_seconds)
 560:	84 2f       	mov	r24, r20
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	2e 2d       	mov	r18, r14
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	22 0f       	add	r18, r18
 570:	33 1f       	adc	r19, r19
 572:	22 0f       	add	r18, r18
 574:	33 1f       	adc	r19, r19
 576:	22 0f       	add	r18, r18
 578:	33 1f       	adc	r19, r19
 57a:	26 0f       	add	r18, r22
 57c:	37 1f       	adc	r19, r23
 57e:	82 17       	cp	r24, r18
 580:	93 07       	cpc	r25, r19
 582:	bc f2       	brlt	.-82     	; 0x532 <leds_on_temporary_interruptCheck+0x40>
		_delay_ms(100);
		interval++;
	}
	/* it time is up, turn off LEDs and return */
	
	DIO_write(led1->portNumber, led1->pinNumber, LOW);
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	69 81       	ldd	r22, Y+1	; 0x01
 588:	88 81       	ld	r24, Y
 58a:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	DIO_write(led2->portNumber, led2->pinNumber, LOW);
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	f8 01       	movw	r30, r16
 592:	61 81       	ldd	r22, Z+1	; 0x01
 594:	80 81       	ld	r24, Z
 596:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_write>
	return error_type;
 59a:	8f 2d       	mov	r24, r15
 59c:	00 c0       	rjmp	.+0      	; 0x59e <leds_on_temporary_interruptCheck+0xac>
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	08 95       	ret

000005ac <main>:
	//leds_on_temporary_interruptCheck_test();
	
	 //BUTTON_init_test();
	// BUTTON_read_test();
	
	app_init();
 5ac:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
    while (1) 
    {
		
		normalMode();
 5b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <normalMode>
 5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <main+0x4>

000005b6 <DIO_init>:
#include "DIO.h"
/*************************************************************************************************/
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <DIO_init+0x6>
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	6a 83       	std	Y+2, r22	; 0x02
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
	
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	88 30       	cpi	r24, 0x08	; 8
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <DIO_init+0x16>
 5ca:	91 c0       	rjmp	.+290    	; 0x6ee <DIO_init+0x138>
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
		error_type = undefined_pin;
		return error_type;
	}
	
	/* check which port to be used  */
	switch(portNumber)
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	82 34       	cpi	r24, 0x42	; 66
 5d2:	61 f1       	breq	.+88     	; 0x62c <DIO_init+0x76>
 5d4:	18 f4       	brcc	.+6      	; 0x5dc <DIO_init+0x26>
 5d6:	81 34       	cpi	r24, 0x41	; 65
 5d8:	41 f0       	breq	.+16     	; 0x5ea <DIO_init+0x34>
 5da:	8b c0       	rjmp	.+278    	; 0x6f2 <DIO_init+0x13c>
 5dc:	83 34       	cpi	r24, 0x43	; 67
 5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_init+0x2c>
 5e0:	46 c0       	rjmp	.+140    	; 0x66e <DIO_init+0xb8>
 5e2:	84 34       	cpi	r24, 0x44	; 68
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_init+0x32>
 5e6:	63 c0       	rjmp	.+198    	; 0x6ae <DIO_init+0xf8>
 5e8:	84 c0       	rjmp	.+264    	; 0x6f2 <DIO_init+0x13c>
	{
		case PORT_A:
			/* if direction is INPUT, set that pin to 0  */
			if (direction == INPUT)
 5ea:	41 11       	cpse	r20, r1
 5ec:	0f c0       	rjmp	.+30     	; 0x60c <DIO_init+0x56>
			{
				CLR_BIT(DDRA,pinNumber);		// DDRA &= ~(1<<pinNumber)
 5ee:	2a 81       	ldd	r18, Y+2	; 0x02
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_init+0x44>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	2a 95       	dec	r18
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_init+0x40>
 5fe:	80 95       	com	r24
 600:	90 95       	com	r25
 602:	9a b3       	in	r25, 0x1a	; 26
 604:	89 23       	and	r24, r25
 606:	8a bb       	out	0x1a, r24	; 26
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	7c c0       	rjmp	.+248    	; 0x704 <DIO_init+0x14e>
			if (direction == INPUT)
			{
				CLR_BIT(DDRA,pinNumber);		// DDRA &= ~(1<<pinNumber)
			}
			/* else if direction is OUTPUT, set that pin to 1  */
			else if (direction == OUTPUT)
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	09 f0       	breq	.+2      	; 0x612 <DIO_init+0x5c>
 610:	72 c0       	rjmp	.+228    	; 0x6f6 <DIO_init+0x140>
			{
				SET_BIT(DDRA,pinNumber);		// DDRA |= (1<<pinNumber);
 612:	2a 81       	ldd	r18, Y+2	; 0x02
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_init+0x68>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_init+0x64>
 622:	9a b3       	in	r25, 0x1a	; 26
 624:	89 2b       	or	r24, r25
 626:	8a bb       	out	0x1a, r24	; 26
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	6c c0       	rjmp	.+216    	; 0x704 <DIO_init+0x14e>
			}
		break;
		
		/* repeat the same steps of port A to port B */
		case PORT_B:
			if (direction == INPUT)
 62c:	41 11       	cpse	r20, r1
 62e:	0f c0       	rjmp	.+30     	; 0x64e <DIO_init+0x98>
			{
				CLR_BIT(DDRB,pinNumber);		// DDRB &= ~(1<<pinNumber);
 630:	2a 81       	ldd	r18, Y+2	; 0x02
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_init+0x86>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	2a 95       	dec	r18
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_init+0x82>
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	97 b3       	in	r25, 0x17	; 23
 646:	89 23       	and	r24, r25
 648:	87 bb       	out	0x17, r24	; 23
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	5b c0       	rjmp	.+182    	; 0x704 <DIO_init+0x14e>
		case PORT_B:
			if (direction == INPUT)
			{
				CLR_BIT(DDRB,pinNumber);		// DDRB &= ~(1<<pinNumber);
			}
			else if (direction == OUTPUT)
 64e:	41 30       	cpi	r20, 0x01	; 1
 650:	09 f0       	breq	.+2      	; 0x654 <DIO_init+0x9e>
 652:	53 c0       	rjmp	.+166    	; 0x6fa <DIO_init+0x144>
			{
				SET_BIT(DDRB,pinNumber);		// DDRB |= (1<<pinNumber);
 654:	2a 81       	ldd	r18, Y+2	; 0x02
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_init+0xaa>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	2a 95       	dec	r18
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_init+0xa6>
 664:	97 b3       	in	r25, 0x17	; 23
 666:	89 2b       	or	r24, r25
 668:	87 bb       	out	0x17, r24	; 23
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	4b c0       	rjmp	.+150    	; 0x704 <DIO_init+0x14e>
			}
		break;
		
		/* repeat the same steps of port A to port C */
		case PORT_C:
			if (direction == INPUT)
 66e:	41 11       	cpse	r20, r1
 670:	0f c0       	rjmp	.+30     	; 0x690 <DIO_init+0xda>
			{
				CLR_BIT(DDRC,pinNumber);		// DDRC &= ~(1<<pinNumber);
 672:	2a 81       	ldd	r18, Y+2	; 0x02
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_init+0xc8>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	2a 95       	dec	r18
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_init+0xc4>
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	94 b3       	in	r25, 0x14	; 20
 688:	89 23       	and	r24, r25
 68a:	84 bb       	out	0x14, r24	; 20
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	3a c0       	rjmp	.+116    	; 0x704 <DIO_init+0x14e>
		case PORT_C:
			if (direction == INPUT)
			{
				CLR_BIT(DDRC,pinNumber);		// DDRC &= ~(1<<pinNumber);
			} 
			else if (direction == OUTPUT)
 690:	41 30       	cpi	r20, 0x01	; 1
 692:	a9 f5       	brne	.+106    	; 0x6fe <DIO_init+0x148>
			{
				SET_BIT(DDRC,pinNumber);		// DDRC |= (1<<pinNumber);
 694:	2a 81       	ldd	r18, Y+2	; 0x02
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_init+0xea>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	2a 95       	dec	r18
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_init+0xe6>
 6a4:	94 b3       	in	r25, 0x14	; 20
 6a6:	89 2b       	or	r24, r25
 6a8:	84 bb       	out	0x14, r24	; 20
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	2b c0       	rjmp	.+86     	; 0x704 <DIO_init+0x14e>
			}
		break;

		/* repeat the same steps of port A to port D */
		case PORT_D:
			if (direction == INPUT)
 6ae:	41 11       	cpse	r20, r1
 6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <DIO_init+0x11a>
			{
				CLR_BIT(DDRD,pinNumber);		// DDRD &= ~(1<<pinNumber);
 6b2:	2a 81       	ldd	r18, Y+2	; 0x02
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_init+0x108>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	2a 95       	dec	r18
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_init+0x104>
 6c2:	80 95       	com	r24
 6c4:	90 95       	com	r25
 6c6:	91 b3       	in	r25, 0x11	; 17
 6c8:	89 23       	and	r24, r25
 6ca:	81 bb       	out	0x11, r24	; 17
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	1a c0       	rjmp	.+52     	; 0x704 <DIO_init+0x14e>
		case PORT_D:
			if (direction == INPUT)
			{
				CLR_BIT(DDRD,pinNumber);		// DDRD &= ~(1<<pinNumber);
			}
			else if (direction == OUTPUT)
 6d0:	41 30       	cpi	r20, 0x01	; 1
 6d2:	b9 f4       	brne	.+46     	; 0x702 <DIO_init+0x14c>
			{
				SET_BIT(DDRD,pinNumber);		// DDRD |= (1<<pinNumber);
 6d4:	2a 81       	ldd	r18, Y+2	; 0x02
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_init+0x12a>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	2a 95       	dec	r18
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_init+0x126>
 6e4:	91 b3       	in	r25, 0x11	; 17
 6e6:	89 2b       	or	r24, r25
 6e8:	81 bb       	out	0x11, r24	; 17
/*******************               DIO_init()          *******************************************/
/*************************************************************************************************/
EN_DIO_error DIO_init(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t direction)		// initialize a pin as INPUT OR OUTPUT
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <DIO_init+0x14e>
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
	{
		/* return undefined pin error  */	
		error_type = undefined_pin;
		return error_type;
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	09 c0       	rjmp	.+18     	; 0x704 <DIO_init+0x14e>
		break;
		
		/* if user enters an invalid port name  */
		default:
			/* set error type to undefined port error  */
			error_type = undefined_port;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <DIO_init+0x14e>
				SET_BIT(DDRA,pinNumber);		// DDRA |= (1<<pinNumber);
			}
			else
			/* if user entered a false direction other than input(0) or output(1)  */
			{
				error_type = undefined_direction;
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <DIO_init+0x14e>
			{
				SET_BIT(DDRB,pinNumber);		// DDRB |= (1<<pinNumber);
			}
			else
			{
				error_type = undefined_direction;
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <DIO_init+0x14e>
				SET_BIT(DDRC,pinNumber);		// DDRC |= (1<<pinNumber);
			}
			else
			{
				// error handling
				error_type = undefined_direction;
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	01 c0       	rjmp	.+2      	; 0x704 <DIO_init+0x14e>
			{
				SET_BIT(DDRD,pinNumber);		// DDRD |= (1<<pinNumber);
			}
			else
			{
				error_type = undefined_direction;
 702:	83 e0       	ldi	r24, 0x03	; 3
			error_type = undefined_port;
		break;
	}
	/* return error type */
	return error_type;
}
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <DIO_write>:
/*************************************************************************************************/
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	00 d0       	rcall	.+0      	; 0x714 <DIO_write+0x6>
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	6a 83       	std	Y+2, r22	; 0x02
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
	
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	88 30       	cpi	r24, 0x08	; 8
 720:	08 f0       	brcs	.+2      	; 0x724 <DIO_write+0x16>
 722:	91 c0       	rjmp	.+290    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 724:	8a 81       	ldd	r24, Y+2	; 0x02
		error_type = undefined_pin;
		return error_type;
	}
	
	/* check which port to be used  */
	switch (portNumber)
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	82 34       	cpi	r24, 0x42	; 66
 72a:	61 f1       	breq	.+88     	; 0x784 <DIO_write+0x76>
 72c:	18 f4       	brcc	.+6      	; 0x734 <DIO_write+0x26>
 72e:	81 34       	cpi	r24, 0x41	; 65
 730:	41 f0       	breq	.+16     	; 0x742 <DIO_write+0x34>
 732:	8b c0       	rjmp	.+278    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 734:	83 34       	cpi	r24, 0x43	; 67
 736:	09 f4       	brne	.+2      	; 0x73a <DIO_write+0x2c>
 738:	46 c0       	rjmp	.+140    	; 0x7c6 <DIO_write+0xb8>
 73a:	84 34       	cpi	r24, 0x44	; 68
 73c:	09 f4       	brne	.+2      	; 0x740 <DIO_write+0x32>
 73e:	63 c0       	rjmp	.+198    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 740:	84 c0       	rjmp	.+264    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	{
		case PORT_A:
			/* if state is LOW, set that pin to 0  */
			if (state == LOW)
 742:	41 11       	cpse	r20, r1
 744:	0f c0       	rjmp	.+30     	; 0x764 <DIO_write+0x56>
			{
				CLR_BIT(PORTA,pinNumber);		// PORTA &= ~(1<<pinNumber);
 746:	2a 81       	ldd	r18, Y+2	; 0x02
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_write+0x44>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	2a 95       	dec	r18
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_write+0x40>
 756:	80 95       	com	r24
 758:	90 95       	com	r25
 75a:	9b b3       	in	r25, 0x1b	; 27
 75c:	89 23       	and	r24, r25
 75e:	8b bb       	out	0x1b, r24	; 27
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	7c c0       	rjmp	.+248    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			if (state == LOW)
			{
				CLR_BIT(PORTA,pinNumber);		// PORTA &= ~(1<<pinNumber);
			}
			/* else if state is HIGH, set that pin to 1  */
			else if (state == HIGH)
 764:	41 30       	cpi	r20, 0x01	; 1
 766:	09 f0       	breq	.+2      	; 0x76a <DIO_write+0x5c>
 768:	72 c0       	rjmp	.+228    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			{
				SET_BIT(PORTA,pinNumber);		// PORTA |= (1<<pinNumber);
 76a:	2a 81       	ldd	r18, Y+2	; 0x02
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_write+0x68>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	2a 95       	dec	r18
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_write+0x64>
 77a:	9b b3       	in	r25, 0x1b	; 27
 77c:	89 2b       	or	r24, r25
 77e:	8b bb       	out	0x1b, r24	; 27
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	6c c0       	rjmp	.+216    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			}
		break;
		
		/* repeat the same steps of port A to port B */
		case PORT_B:
			if (state == LOW)
 784:	41 11       	cpse	r20, r1
 786:	0f c0       	rjmp	.+30     	; 0x7a6 <DIO_write+0x98>
			{
				CLR_BIT(PORTB,pinNumber);		// PORTB &= ~(1<<pinNumber);
 788:	2a 81       	ldd	r18, Y+2	; 0x02
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_write+0x86>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	2a 95       	dec	r18
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_write+0x82>
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	98 b3       	in	r25, 0x18	; 24
 79e:	89 23       	and	r24, r25
 7a0:	88 bb       	out	0x18, r24	; 24
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	5b c0       	rjmp	.+182    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_B:
			if (state == LOW)
			{
				CLR_BIT(PORTB,pinNumber);		// PORTB &= ~(1<<pinNumber);
			}
			else if (state == HIGH)
 7a6:	41 30       	cpi	r20, 0x01	; 1
 7a8:	09 f0       	breq	.+2      	; 0x7ac <DIO_write+0x9e>
 7aa:	53 c0       	rjmp	.+166    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			{	
				SET_BIT(PORTB,pinNumber);		// PORTB |= (1<<pinNumber);
 7ac:	2a 81       	ldd	r18, Y+2	; 0x02
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_write+0xaa>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	2a 95       	dec	r18
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_write+0xa6>
 7bc:	98 b3       	in	r25, 0x18	; 24
 7be:	89 2b       	or	r24, r25
 7c0:	88 bb       	out	0x18, r24	; 24
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	4b c0       	rjmp	.+150    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			}
		break;
		
		/* repeat the same steps of port A to port C */
		case PORT_C:
			if (state == LOW)
 7c6:	41 11       	cpse	r20, r1
 7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <DIO_write+0xda>
			{
				CLR_BIT(PORTC,pinNumber);		// PORTC &= ~(1<<pinNumber);
 7ca:	2a 81       	ldd	r18, Y+2	; 0x02
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_write+0xc8>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	2a 95       	dec	r18
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_write+0xc4>
 7da:	80 95       	com	r24
 7dc:	90 95       	com	r25
 7de:	95 b3       	in	r25, 0x15	; 21
 7e0:	89 23       	and	r24, r25
 7e2:	85 bb       	out	0x15, r24	; 21
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	3a c0       	rjmp	.+116    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_C:
			if (state == LOW)
			{
				CLR_BIT(PORTC,pinNumber);		// PORTC &= ~(1<<pinNumber);
			}
			else if (state == HIGH)
 7e8:	41 30       	cpi	r20, 0x01	; 1
 7ea:	a9 f5       	brne	.+106    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			{
				SET_BIT(PORTC,pinNumber);		// PORTC |= (1<<pinNumber);
 7ec:	2a 81       	ldd	r18, Y+2	; 0x02
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_write+0xea>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	2a 95       	dec	r18
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_write+0xe6>
 7fc:	95 b3       	in	r25, 0x15	; 21
 7fe:	89 2b       	or	r24, r25
 800:	85 bb       	out	0x15, r24	; 21
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	2b c0       	rjmp	.+86     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			}
		break;
		
		/* repeat the same steps of port A to port D */
		case PORT_D:
			if (state == LOW)
 806:	41 11       	cpse	r20, r1
 808:	0f c0       	rjmp	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			{
				CLR_BIT(PORTD,pinNumber);		// PORTD &= ~(1<<pinNumber);
 80a:	2a 81       	ldd	r18, Y+2	; 0x02
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	2a 95       	dec	r18
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	80 95       	com	r24
 81c:	90 95       	com	r25
 81e:	92 b3       	in	r25, 0x12	; 18
 820:	89 23       	and	r24, r25
 822:	82 bb       	out	0x12, r24	; 18
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	1a c0       	rjmp	.+52     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_D:
			if (state == LOW)
			{
				CLR_BIT(PORTD,pinNumber);		// PORTD &= ~(1<<pinNumber);
			}
			else if (state == HIGH)
 828:	41 30       	cpi	r20, 0x01	; 1
 82a:	b9 f4       	brne	.+46     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				SET_BIT(PORTD,pinNumber);		// PORTD |= (1<<pinNumber);
 82c:	2a 81       	ldd	r18, Y+2	; 0x02
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	2a 95       	dec	r18
 83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	92 b3       	in	r25, 0x12	; 18
 83e:	89 2b       	or	r24, r25
 840:	82 bb       	out	0x12, r24	; 18
/*******************                 DIO_write()          ****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_write(volatile uint8_t portNumber, volatile uint8_t pinNumber, uint8_t state) 			// set a pin as HIGH OR LOW
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	0b c0       	rjmp	.+22     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
	{
		/* set error_type to undefined pin  */
		error_type = undefined_pin;
		return error_type;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	09 c0       	rjmp	.+18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			
		break;
		/* if user enters an invalid port name  */
		default:
			/* set error type to undefined port error  */
			error_type = undefined_port;
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	07 c0       	rjmp	.+14     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			}
			else
			/* if user entered a false state other than LOW or HIGH  */
			{
				/* set error type to undefined port error  */
				error_type = undefined_state;
 84e:	84 e0       	ldi	r24, 0x04	; 4
 850:	05 c0       	rjmp	.+10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			{	
				SET_BIT(PORTB,pinNumber);		// PORTB |= (1<<pinNumber);
			}
			else
			{
				error_type = undefined_state;
 852:	84 e0       	ldi	r24, 0x04	; 4
 854:	03 c0       	rjmp	.+6      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			{
				SET_BIT(PORTC,pinNumber);		// PORTC |= (1<<pinNumber);
			}
			else
			{
				error_type = undefined_state;
 856:	84 e0       	ldi	r24, 0x04	; 4
 858:	01 c0       	rjmp	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			{
				SET_BIT(PORTD,pinNumber);		// PORTD |= (1<<pinNumber);
			}
			else
			{
				error_type = undefined_state;
 85a:	84 e0       	ldi	r24, 0x04	; 4
			error_type = undefined_port;
		break;
	}
	/* return error type */
	return error_type;
}
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <DIO_toggle>:
/*************************************************************************************************/
/*******************               DIO_toggle()          *****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_toggle(volatile uint8_t portNumber, volatile uint8_t pinNumber)						// toggles a bit state
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	00 d0       	rcall	.+0      	; 0x86c <DIO_toggle+0x6>
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	6a 83       	std	Y+2, r22	; 0x02
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
	
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	88 30       	cpi	r24, 0x08	; 8
 878:	08 f0       	brcs	.+2      	; 0x87c <DIO_toggle+0x16>
 87a:	41 c0       	rjmp	.+130    	; 0x8fe <DIO_toggle+0x98>
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
		error_type = undefined_pin;
		return error_type;
	}
	
	/* check which port to be used  */
	switch(portNumber)
 87e:	89 81       	ldd	r24, Y+1	; 0x01
 880:	82 34       	cpi	r24, 0x42	; 66
 882:	b1 f0       	breq	.+44     	; 0x8b0 <DIO_toggle+0x4a>
 884:	18 f4       	brcc	.+6      	; 0x88c <DIO_toggle+0x26>
 886:	81 34       	cpi	r24, 0x41	; 65
 888:	31 f0       	breq	.+12     	; 0x896 <DIO_toggle+0x30>
 88a:	3b c0       	rjmp	.+118    	; 0x902 <DIO_toggle+0x9c>
 88c:	83 34       	cpi	r24, 0x43	; 67
 88e:	e9 f0       	breq	.+58     	; 0x8ca <DIO_toggle+0x64>
 890:	84 34       	cpi	r24, 0x44	; 68
 892:	41 f1       	breq	.+80     	; 0x8e4 <DIO_toggle+0x7e>
 894:	36 c0       	rjmp	.+108    	; 0x902 <DIO_toggle+0x9c>
	{
		
		case PORT_A:
			/* toggle the required pin  */
			TOGGLE_BIT(PORTA, pinNumber);		// PORTA ^= (1<<pinNumber);
 896:	2a 81       	ldd	r18, Y+2	; 0x02
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <DIO_toggle+0x3c>
 89e:	88 0f       	add	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	2a 95       	dec	r18
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <DIO_toggle+0x38>
 8a6:	9b b3       	in	r25, 0x1b	; 27
 8a8:	89 27       	eor	r24, r25
 8aa:	8b bb       	out	0x1b, r24	; 27
/*******************               DIO_toggle()          *****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_toggle(volatile uint8_t portNumber, volatile uint8_t pinNumber)						// toggles a bit state
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		
		case PORT_A:
			/* toggle the required pin  */
			TOGGLE_BIT(PORTA, pinNumber);		// PORTA ^= (1<<pinNumber);
		break;
 8ae:	2a c0       	rjmp	.+84     	; 0x904 <DIO_toggle+0x9e>
		
		/* repeat the same steps of port A to port B */
		case PORT_B:
			TOGGLE_BIT(PORTB, pinNumber);		// PORTB ^= (1<<pinNumber);
 8b0:	2a 81       	ldd	r18, Y+2	; 0x02
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <DIO_toggle+0x56>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	2a 95       	dec	r18
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <DIO_toggle+0x52>
 8c0:	98 b3       	in	r25, 0x18	; 24
 8c2:	89 27       	eor	r24, r25
 8c4:	88 bb       	out	0x18, r24	; 24
/*******************               DIO_toggle()          *****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_toggle(volatile uint8_t portNumber, volatile uint8_t pinNumber)						// toggles a bit state
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		/* repeat the same steps of port A to port B */
		case PORT_B:
			TOGGLE_BIT(PORTB, pinNumber);		// PORTB ^= (1<<pinNumber);
		break;
 8c8:	1d c0       	rjmp	.+58     	; 0x904 <DIO_toggle+0x9e>
		
		/* repeat the same steps of port A to port C */
		case PORT_C:
			TOGGLE_BIT(PORTC, pinNumber);		// PORTC ^= (1<<pinNumber);
 8ca:	2a 81       	ldd	r18, Y+2	; 0x02
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_toggle+0x70>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	2a 95       	dec	r18
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_toggle+0x6c>
 8da:	95 b3       	in	r25, 0x15	; 21
 8dc:	89 27       	eor	r24, r25
 8de:	85 bb       	out	0x15, r24	; 21
/*******************               DIO_toggle()          *****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_toggle(volatile uint8_t portNumber, volatile uint8_t pinNumber)						// toggles a bit state
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 8e0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		/* repeat the same steps of port A to port C */
		case PORT_C:
			TOGGLE_BIT(PORTC, pinNumber);		// PORTC ^= (1<<pinNumber);
		break;
 8e2:	10 c0       	rjmp	.+32     	; 0x904 <DIO_toggle+0x9e>
		
		/* repeat the same steps of port A to port D */
		case PORT_D:
			TOGGLE_BIT(PORTD, pinNumber);		// PORTD ^= (1<<pinNumber);
 8e4:	2a 81       	ldd	r18, Y+2	; 0x02
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_toggle+0x8a>
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	2a 95       	dec	r18
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_toggle+0x86>
 8f4:	92 b3       	in	r25, 0x12	; 18
 8f6:	89 27       	eor	r24, r25
 8f8:	82 bb       	out	0x12, r24	; 18
/*******************               DIO_toggle()          *****************************************/
/*************************************************************************************************/
EN_DIO_error DIO_toggle(volatile uint8_t portNumber, volatile uint8_t pinNumber)						// toggles a bit state
{
	/* create a variable to store the error type  */
	EN_DIO_error error_type = DIO_ok;
 8fa:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		/* repeat the same steps of port A to port D */
		case PORT_D:
			TOGGLE_BIT(PORTD, pinNumber);		// PORTD ^= (1<<pinNumber);
		break;
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <DIO_toggle+0x9e>
	/* check if pin number is not legal  */
	if (pinNumber > 7 || pinNumber < 0)
	{
		/* return undefined pin error  */
		error_type = undefined_pin;
		return error_type;
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	01 c0       	rjmp	.+2      	; 0x904 <DIO_toggle+0x9e>
		break;
		
		/* if user enters an invalid port name  */
		default:
			/* set error type to undefined port error  */
			error_type = undefined_port;
 902:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	/* return error type */
	return error_type;
}
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	08 95       	ret

0000090e <EXT_INT0_triggerControl>:
{
	/* create a variable to store the error type  */
	EN_INTERRUPT_error error_type = INTERRUPT_ok;
	
	/* if user enters a false trigger condition  */
	if (trigger_condition > 3 || trigger_condition < 0)
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	30 f4       	brcc	.+12     	; 0x91e <EXT_INT0_triggerControl+0x10>
		return error_type = undefined_trigger_condition;
	}
	
	/* CLEAR ISC00 && ISC01 (responsible for trigger control of interrupt 0)  */
	/* load ISC00 && ISC01 with the relevant trigger  */
	MCUCR	= (MCUCR & 0xFC) | (trigger_condition);				/* trigger condition values are 0,1,2,3
 912:	95 b7       	in	r25, 0x35	; 53
 914:	9c 7f       	andi	r25, 0xFC	; 252
 916:	89 2b       	or	r24, r25
 918:	85 bf       	out	0x35, r24	; 53
											   if it's 0 then nothing will change, we have already CLEARED ISC00 and ISC01
											   else if it's 1 then ISC00 will be set to 1
											   else if it's 2 then ISC01 will be set to 1
											   else if if it's 3 then both ISC00 and ISC01 will be set to 1 */ 
	return error_type;
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	08 95       	ret
	
	/* if user enters a false trigger condition  */
	if (trigger_condition > 3 || trigger_condition < 0)
	{
		/* set error_type to undefined_trigger_condition  */
		return error_type = undefined_trigger_condition;
 91e:	81 e0       	ldi	r24, 0x01	; 1
											   if it's 0 then nothing will change, we have already CLEARED ISC00 and ISC01
											   else if it's 1 then ISC00 will be set to 1
											   else if it's 2 then ISC01 will be set to 1
											   else if if it's 3 then both ISC00 and ISC01 will be set to 1 */ 
	return error_type;
}
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
