
on.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000022ae  00002342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800186  00800186  00002468  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002122  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  000071f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d07  00000000  00000000  000073a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001011  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eca  00000000  00000000  0000a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000af8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c7  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000082e  00000000  00000000  0000b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_1>
       8:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_2>
       c:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 10 	call	0x21ec	; 0x21ec <main>
      8a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 11 	jmp	0x228c	; 0x228c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 11 	jmp	0x228c	; 0x228c <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 11 	jmp	0x224c	; 0x224c <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 46 11 	jmp	0x228c	; 0x228c <__epilogue_restores__+0x18>

000005f6 <__ltsf2>:
     5f6:	a8 e1       	ldi	r26, 0x18	; 24
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__prologue_saves__+0x18>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	89 e0       	ldi	r24, 0x09	; 9
     614:	e8 2e       	mov	r14, r24
     616:	f1 2c       	mov	r15, r1
     618:	ec 0e       	add	r14, r28
     61a:	fd 1e       	adc	r15, r29
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	b7 01       	movw	r22, r14
     622:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     626:	8e 01       	movw	r16, r28
     628:	0f 5e       	subi	r16, 0xEF	; 239
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	ce 01       	movw	r24, r28
     62e:	05 96       	adiw	r24, 0x05	; 5
     630:	b8 01       	movw	r22, r16
     632:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     636:	89 85       	ldd	r24, Y+9	; 0x09
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	40 f0       	brcs	.+16     	; 0x64c <__ltsf2+0x56>
     63c:	89 89       	ldd	r24, Y+17	; 0x11
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	28 f0       	brcs	.+10     	; 0x64c <__ltsf2+0x56>
     642:	c7 01       	movw	r24, r14
     644:	b8 01       	movw	r22, r16
     646:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     64a:	01 c0       	rjmp	.+2      	; 0x64e <__ltsf2+0x58>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	68 96       	adiw	r28, 0x18	; 24
     650:	e6 e0       	ldi	r30, 0x06	; 6
     652:	0c 94 46 11 	jmp	0x228c	; 0x228c <__epilogue_restores__+0x18>

00000656 <__fixsfsi>:
     656:	ac e0       	ldi	r26, 0x0C	; 12
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e1 e3       	ldi	r30, 0x31	; 49
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x20>
     662:	69 83       	std	Y+1, r22	; 0x01
     664:	7a 83       	std	Y+2, r23	; 0x02
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	9c 83       	std	Y+4, r25	; 0x04
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	be 01       	movw	r22, r28
     670:	6b 5f       	subi	r22, 0xFB	; 251
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	61 f1       	breq	.+88     	; 0x6d6 <__fixsfsi+0x80>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	50 f1       	brcs	.+84     	; 0x6d6 <__fixsfsi+0x80>
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	21 f4       	brne	.+8      	; 0x68e <__fixsfsi+0x38>
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	88 23       	and	r24, r24
     68a:	51 f1       	breq	.+84     	; 0x6e0 <__fixsfsi+0x8a>
     68c:	2e c0       	rjmp	.+92     	; 0x6ea <__fixsfsi+0x94>
     68e:	2f 81       	ldd	r18, Y+7	; 0x07
     690:	38 85       	ldd	r19, Y+8	; 0x08
     692:	37 fd       	sbrc	r19, 7
     694:	20 c0       	rjmp	.+64     	; 0x6d6 <__fixsfsi+0x80>
     696:	6e 81       	ldd	r22, Y+6	; 0x06
     698:	2f 31       	cpi	r18, 0x1F	; 31
     69a:	31 05       	cpc	r19, r1
     69c:	1c f0       	brlt	.+6      	; 0x6a4 <__fixsfsi+0x4e>
     69e:	66 23       	and	r22, r22
     6a0:	f9 f0       	breq	.+62     	; 0x6e0 <__fixsfsi+0x8a>
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <__fixsfsi+0x94>
     6a4:	8e e1       	ldi	r24, 0x1E	; 30
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	82 1b       	sub	r24, r18
     6aa:	93 0b       	sbc	r25, r19
     6ac:	29 85       	ldd	r18, Y+9	; 0x09
     6ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fixsfsi+0x68>
     6b6:	56 95       	lsr	r21
     6b8:	47 95       	ror	r20
     6ba:	37 95       	ror	r19
     6bc:	27 95       	ror	r18
     6be:	8a 95       	dec	r24
     6c0:	d2 f7       	brpl	.-12     	; 0x6b6 <__fixsfsi+0x60>
     6c2:	66 23       	and	r22, r22
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <__fixsfsi+0x9c>
     6c6:	50 95       	com	r21
     6c8:	40 95       	com	r20
     6ca:	30 95       	com	r19
     6cc:	21 95       	neg	r18
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	4f 4f       	sbci	r20, 0xFF	; 255
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__fixsfsi+0x9c>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__fixsfsi+0x9c>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f e7       	ldi	r21, 0x7F	; 127
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fixsfsi+0x9c>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e8       	ldi	r21, 0x80	; 128
     6f2:	b9 01       	movw	r22, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	2c 96       	adiw	r28, 0x0c	; 12
     6f8:	e2 e0       	ldi	r30, 0x02	; 2
     6fa:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x20>

000006fe <__floatunsisf>:
     6fe:	a8 e0       	ldi	r26, 0x08	; 8
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 26 11 	jmp	0x224c	; 0x224c <__prologue_saves__+0x10>
     70a:	7b 01       	movw	r14, r22
     70c:	8c 01       	movw	r16, r24
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	81 05       	cpc	r24, r1
     714:	91 05       	cpc	r25, r1
     716:	19 f4       	brne	.+6      	; 0x71e <__floatunsisf+0x20>
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	60 c0       	rjmp	.+192    	; 0x7de <__floatunsisf+0xe0>
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	c8 2e       	mov	r12, r24
     726:	d1 2c       	mov	r13, r1
     728:	dc 82       	std	Y+4, r13	; 0x04
     72a:	cb 82       	std	Y+3, r12	; 0x03
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__clzsi2>
     73c:	fc 01       	movw	r30, r24
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f7 ff       	sbrs	r31, 7
     742:	3b c0       	rjmp	.+118    	; 0x7ba <__floatunsisf+0xbc>
     744:	22 27       	eor	r18, r18
     746:	33 27       	eor	r19, r19
     748:	2e 1b       	sub	r18, r30
     74a:	3f 0b       	sbc	r19, r31
     74c:	57 01       	movw	r10, r14
     74e:	68 01       	movw	r12, r16
     750:	02 2e       	mov	r0, r18
     752:	04 c0       	rjmp	.+8      	; 0x75c <__floatunsisf+0x5e>
     754:	d6 94       	lsr	r13
     756:	c7 94       	ror	r12
     758:	b7 94       	ror	r11
     75a:	a7 94       	ror	r10
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__floatunsisf+0x56>
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <__floatunsisf+0x7c>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	2a 95       	dec	r18
     77c:	d2 f7       	brpl	.-12     	; 0x772 <__floatunsisf+0x74>
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	a1 09       	sbc	r26, r1
     782:	b1 09       	sbc	r27, r1
     784:	8e 21       	and	r24, r14
     786:	9f 21       	and	r25, r15
     788:	a0 23       	and	r26, r16
     78a:	b1 23       	and	r27, r17
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	21 f0       	breq	.+8      	; 0x79c <__floatunsisf+0x9e>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	4a 29       	or	r20, r10
     79e:	5b 29       	or	r21, r11
     7a0:	6c 29       	or	r22, r12
     7a2:	7d 29       	or	r23, r13
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	8e e1       	ldi	r24, 0x1E	; 30
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8e 1b       	sub	r24, r30
     7b2:	9f 0b       	sbc	r25, r31
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__floatunsisf+0xe0>
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	81 f0       	breq	.+32     	; 0x7de <__floatunsisf+0xe0>
     7be:	0e 2e       	mov	r0, r30
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__floatunsisf+0xcc>
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	00 1f       	adc	r16, r16
     7c8:	11 1f       	adc	r17, r17
     7ca:	0a 94       	dec	r0
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <__floatunsisf+0xc4>
     7ce:	ed 82       	std	Y+5, r14	; 0x05
     7d0:	fe 82       	std	Y+6, r15	; 0x06
     7d2:	0f 83       	std	Y+7, r16	; 0x07
     7d4:	18 87       	std	Y+8, r17	; 0x08
     7d6:	ce 1a       	sub	r12, r30
     7d8:	df 0a       	sbc	r13, r31
     7da:	dc 82       	std	Y+4, r13	; 0x04
     7dc:	cb 82       	std	Y+3, r12	; 0x03
     7de:	1a 82       	std	Y+2, r1	; 0x02
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	ea e0       	ldi	r30, 0x0A	; 10
     7ec:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__epilogue_restores__+0x10>

000007f0 <__clzsi2>:
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	7b 01       	movw	r14, r22
     7fa:	8c 01       	movw	r16, r24
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	e8 16       	cp	r14, r24
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	f8 06       	cpc	r15, r24
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 07       	cpc	r16, r24
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	18 07       	cpc	r17, r24
     80c:	88 f4       	brcc	.+34     	; 0x830 <__clzsi2+0x40>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	e8 16       	cp	r14, r24
     812:	f1 04       	cpc	r15, r1
     814:	01 05       	cpc	r16, r1
     816:	11 05       	cpc	r17, r1
     818:	31 f0       	breq	.+12     	; 0x826 <__clzsi2+0x36>
     81a:	28 f0       	brcs	.+10     	; 0x826 <__clzsi2+0x36>
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	17 c0       	rjmp	.+46     	; 0x854 <__clzsi2+0x64>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	12 c0       	rjmp	.+36     	; 0x854 <__clzsi2+0x64>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	e8 16       	cp	r14, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	f8 06       	cpc	r15, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 07       	cpc	r16, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	18 07       	cpc	r17, r24
     840:	28 f0       	brcs	.+10     	; 0x84c <__clzsi2+0x5c>
     842:	88 e1       	ldi	r24, 0x18	; 24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	04 c0       	rjmp	.+8      	; 0x854 <__clzsi2+0x64>
     84c:	80 e1       	ldi	r24, 0x10	; 16
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	20 e2       	ldi	r18, 0x20	; 32
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	28 1b       	sub	r18, r24
     85e:	39 0b       	sbc	r19, r25
     860:	4a 0b       	sbc	r20, r26
     862:	5b 0b       	sbc	r21, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__stack+0xf>
     866:	16 95       	lsr	r17
     868:	07 95       	ror	r16
     86a:	f7 94       	ror	r15
     86c:	e7 94       	ror	r14
     86e:	8a 95       	dec	r24
     870:	d2 f7       	brpl	.-12     	; 0x866 <__stack+0x7>
     872:	f7 01       	movw	r30, r14
     874:	e8 59       	subi	r30, 0x98	; 152
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	80 81       	ld	r24, Z
     87a:	28 1b       	sub	r18, r24
     87c:	31 09       	sbc	r19, r1
     87e:	41 09       	sbc	r20, r1
     880:	51 09       	sbc	r21, r1
     882:	c9 01       	movw	r24, r18
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <__pack_f>:
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	fc 01       	movw	r30, r24
     89a:	e4 80       	ldd	r14, Z+4	; 0x04
     89c:	f5 80       	ldd	r15, Z+5	; 0x05
     89e:	06 81       	ldd	r16, Z+6	; 0x06
     8a0:	17 81       	ldd	r17, Z+7	; 0x07
     8a2:	d1 80       	ldd	r13, Z+1	; 0x01
     8a4:	80 81       	ld	r24, Z
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <__pack_f+0x2e>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e1       	ldi	r26, 0x10	; 16
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e8 2a       	or	r14, r24
     8b4:	f9 2a       	or	r15, r25
     8b6:	0a 2b       	or	r16, r26
     8b8:	1b 2b       	or	r17, r27
     8ba:	a5 c0       	rjmp	.+330    	; 0xa06 <__pack_f+0x178>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	09 f4       	brne	.+2      	; 0x8c2 <__pack_f+0x34>
     8c0:	9f c0       	rjmp	.+318    	; 0xa00 <__pack_f+0x172>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__pack_f+0x40>
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__pack_f+0x4a>
     8ce:	e1 14       	cp	r14, r1
     8d0:	f1 04       	cpc	r15, r1
     8d2:	01 05       	cpc	r16, r1
     8d4:	11 05       	cpc	r17, r1
     8d6:	19 f4       	brne	.+6      	; 0x8de <__pack_f+0x50>
     8d8:	e0 e0       	ldi	r30, 0x00	; 0
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	96 c0       	rjmp	.+300    	; 0xa0a <__pack_f+0x17c>
     8de:	62 81       	ldd	r22, Z+2	; 0x02
     8e0:	73 81       	ldd	r23, Z+3	; 0x03
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	62 38       	cpi	r22, 0x82	; 130
     8e6:	79 07       	cpc	r23, r25
     8e8:	0c f0       	brlt	.+2      	; 0x8ec <__pack_f+0x5e>
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__pack_f+0x114>
     8ec:	22 e8       	ldi	r18, 0x82	; 130
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	26 1b       	sub	r18, r22
     8f2:	37 0b       	sbc	r19, r23
     8f4:	2a 31       	cpi	r18, 0x1A	; 26
     8f6:	31 05       	cpc	r19, r1
     8f8:	2c f0       	brlt	.+10     	; 0x904 <__pack_f+0x76>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	2a c0       	rjmp	.+84     	; 0x958 <__pack_f+0xca>
     904:	b8 01       	movw	r22, r16
     906:	a7 01       	movw	r20, r14
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__pack_f+0x86>
     90c:	76 95       	lsr	r23
     90e:	67 95       	ror	r22
     910:	57 95       	ror	r21
     912:	47 95       	ror	r20
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__pack_f+0x7e>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <__pack_f+0x9c>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	aa 1f       	adc	r26, r26
     928:	bb 1f       	adc	r27, r27
     92a:	2a 95       	dec	r18
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__pack_f+0x94>
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	8e 21       	and	r24, r14
     936:	9f 21       	and	r25, r15
     938:	a0 23       	and	r26, r16
     93a:	b1 23       	and	r27, r17
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	21 f0       	breq	.+8      	; 0x94c <__pack_f+0xbe>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	9a 01       	movw	r18, r20
     94e:	ab 01       	movw	r20, r22
     950:	28 2b       	or	r18, r24
     952:	39 2b       	or	r19, r25
     954:	4a 2b       	or	r20, r26
     956:	5b 2b       	or	r21, r27
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	80 34       	cpi	r24, 0x40	; 64
     966:	91 05       	cpc	r25, r1
     968:	a1 05       	cpc	r26, r1
     96a:	b1 05       	cpc	r27, r1
     96c:	39 f4       	brne	.+14     	; 0x97c <__pack_f+0xee>
     96e:	27 ff       	sbrs	r18, 7
     970:	09 c0       	rjmp	.+18     	; 0x984 <__pack_f+0xf6>
     972:	20 5c       	subi	r18, 0xC0	; 192
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	4f 4f       	sbci	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__pack_f+0xf6>
     97c:	21 5c       	subi	r18, 0xC1	; 193
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	20 30       	cpi	r18, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	3a 07       	cpc	r19, r26
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	4a 07       	cpc	r20, r26
     992:	a0 e4       	ldi	r26, 0x40	; 64
     994:	5a 07       	cpc	r21, r26
     996:	10 f0       	brcs	.+4      	; 0x99c <__pack_f+0x10e>
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	79 01       	movw	r14, r18
     99e:	8a 01       	movw	r16, r20
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <__pack_f+0x162>
     9a2:	60 38       	cpi	r22, 0x80	; 128
     9a4:	71 05       	cpc	r23, r1
     9a6:	64 f5       	brge	.+88     	; 0xa00 <__pack_f+0x172>
     9a8:	fb 01       	movw	r30, r22
     9aa:	e1 58       	subi	r30, 0x81	; 129
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	d8 01       	movw	r26, r16
     9b0:	c7 01       	movw	r24, r14
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	a0 70       	andi	r26, 0x00	; 0
     9b8:	b0 70       	andi	r27, 0x00	; 0
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	91 05       	cpc	r25, r1
     9be:	a1 05       	cpc	r26, r1
     9c0:	b1 05       	cpc	r27, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <__pack_f+0x144>
     9c4:	e7 fe       	sbrs	r14, 7
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__pack_f+0x154>
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x14c>
     9d2:	8f e3       	ldi	r24, 0x3F	; 63
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 0e       	add	r14, r24
     9dc:	f9 1e       	adc	r15, r25
     9de:	0a 1f       	adc	r16, r26
     9e0:	1b 1f       	adc	r17, r27
     9e2:	17 ff       	sbrs	r17, 7
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__pack_f+0x162>
     9e6:	16 95       	lsr	r17
     9e8:	07 95       	ror	r16
     9ea:	f7 94       	ror	r15
     9ec:	e7 94       	ror	r14
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	16 95       	lsr	r17
     9f4:	07 95       	ror	r16
     9f6:	f7 94       	ror	r15
     9f8:	e7 94       	ror	r14
     9fa:	8a 95       	dec	r24
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <__pack_f+0x164>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__pack_f+0x17c>
     a00:	ee 24       	eor	r14, r14
     a02:	ff 24       	eor	r15, r15
     a04:	87 01       	movw	r16, r14
     a06:	ef ef       	ldi	r30, 0xFF	; 255
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	6e 2f       	mov	r22, r30
     a0c:	67 95       	ror	r22
     a0e:	66 27       	eor	r22, r22
     a10:	67 95       	ror	r22
     a12:	90 2f       	mov	r25, r16
     a14:	9f 77       	andi	r25, 0x7F	; 127
     a16:	d7 94       	ror	r13
     a18:	dd 24       	eor	r13, r13
     a1a:	d7 94       	ror	r13
     a1c:	8e 2f       	mov	r24, r30
     a1e:	86 95       	lsr	r24
     a20:	49 2f       	mov	r20, r25
     a22:	46 2b       	or	r20, r22
     a24:	58 2f       	mov	r21, r24
     a26:	5d 29       	or	r21, r13
     a28:	b7 01       	movw	r22, r14
     a2a:	ca 01       	movw	r24, r20
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	08 95       	ret

00000a38 <__unpack_f>:
     a38:	fc 01       	movw	r30, r24
     a3a:	db 01       	movw	r26, r22
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	22 81       	ldd	r18, Z+2	; 0x02
     a42:	62 2f       	mov	r22, r18
     a44:	6f 77       	andi	r22, 0x7F	; 127
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	22 1f       	adc	r18, r18
     a4a:	22 27       	eor	r18, r18
     a4c:	22 1f       	adc	r18, r18
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	89 2f       	mov	r24, r25
     a52:	88 0f       	add	r24, r24
     a54:	82 2b       	or	r24, r18
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	99 1f       	adc	r25, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	99 1f       	adc	r25, r25
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	9c 93       	st	X, r25
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	21 15       	cp	r18, r1
     a68:	31 05       	cpc	r19, r1
     a6a:	a9 f5       	brne	.+106    	; 0xad6 <__unpack_f+0x9e>
     a6c:	41 15       	cp	r20, r1
     a6e:	51 05       	cpc	r21, r1
     a70:	61 05       	cpc	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <__unpack_f+0x42>
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	37 c0       	rjmp	.+110    	; 0xae8 <__unpack_f+0xb0>
     a7a:	82 e8       	ldi	r24, 0x82	; 130
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	9c 93       	st	X, r25
     a82:	8e 93       	st	-X, r24
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	9a 01       	movw	r18, r20
     a88:	ab 01       	movw	r20, r22
     a8a:	67 e0       	ldi	r22, 0x07	; 7
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	44 1f       	adc	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	6a 95       	dec	r22
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0x54>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	8c 93       	st	X, r24
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <__unpack_f+0x80>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	44 1f       	adc	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	20 30       	cpi	r18, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	38 07       	cpc	r19, r24
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	48 07       	cpc	r20, r24
     ac2:	80 e4       	ldi	r24, 0x40	; 64
     ac4:	58 07       	cpc	r21, r24
     ac6:	58 f3       	brcs	.-42     	; 0xa9e <__unpack_f+0x66>
     ac8:	14 96       	adiw	r26, 0x04	; 4
     aca:	2d 93       	st	X+, r18
     acc:	3d 93       	st	X+, r19
     ace:	4d 93       	st	X+, r20
     ad0:	5c 93       	st	X, r21
     ad2:	17 97       	sbiw	r26, 0x07	; 7
     ad4:	08 95       	ret
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	31 05       	cpc	r19, r1
     ada:	79 f4       	brne	.+30     	; 0xafa <__unpack_f+0xc2>
     adc:	41 15       	cp	r20, r1
     ade:	51 05       	cpc	r21, r1
     ae0:	61 05       	cpc	r22, r1
     ae2:	71 05       	cpc	r23, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__unpack_f+0xb4>
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	8c 93       	st	X, r24
     aea:	08 95       	ret
     aec:	64 ff       	sbrs	r22, 4
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <__unpack_f+0xbe>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 93       	st	X, r24
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <__unpack_f+0xe2>
     af6:	1c 92       	st	X, r1
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <__unpack_f+0xe2>
     afa:	2f 57       	subi	r18, 0x7F	; 127
     afc:	30 40       	sbci	r19, 0x00	; 0
     afe:	13 96       	adiw	r26, 0x03	; 3
     b00:	3c 93       	st	X, r19
     b02:	2e 93       	st	-X, r18
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8c 93       	st	X, r24
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	66 1f       	adc	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	d1 f7       	brne	.-12     	; 0xb0c <__unpack_f+0xd4>
     b18:	70 64       	ori	r23, 0x40	; 64
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	4d 93       	st	X+, r20
     b1e:	5d 93       	st	X+, r21
     b20:	6d 93       	st	X+, r22
     b22:	7c 93       	st	X, r23
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	08 95       	ret

00000b28 <__fpcmp_parts_f>:
     b28:	1f 93       	push	r17
     b2a:	dc 01       	movw	r26, r24
     b2c:	fb 01       	movw	r30, r22
     b2e:	9c 91       	ld	r25, X
     b30:	92 30       	cpi	r25, 0x02	; 2
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__fpcmp_parts_f+0xe>
     b34:	47 c0       	rjmp	.+142    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b36:	80 81       	ld	r24, Z
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <__fpcmp_parts_f+0x16>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b3e:	94 30       	cpi	r25, 0x04	; 4
     b40:	51 f4       	brne	.+20     	; 0xb56 <__fpcmp_parts_f+0x2e>
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	1c 91       	ld	r17, X
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	99 f5       	brne	.+102    	; 0xbb0 <__fpcmp_parts_f+0x88>
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	68 2f       	mov	r22, r24
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	61 1b       	sub	r22, r17
     b52:	71 09       	sbc	r23, r1
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <__fpcmp_parts_f+0xac>
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	21 f0       	breq	.+8      	; 0xb62 <__fpcmp_parts_f+0x3a>
     b5a:	92 30       	cpi	r25, 0x02	; 2
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__fpcmp_parts_f+0x42>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	b9 f1       	breq	.+110    	; 0xbd0 <__fpcmp_parts_f+0xa8>
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	88 23       	and	r24, r24
     b66:	89 f1       	breq	.+98     	; 0xbca <__fpcmp_parts_f+0xa2>
     b68:	2d c0       	rjmp	.+90     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	1c 91       	ld	r17, X
     b6e:	11 97       	sbiw	r26, 0x01	; 1
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	f1 f0       	breq	.+60     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	18 17       	cp	r17, r24
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	2d 91       	ld	r18, X+
     b7e:	3c 91       	ld	r19, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	94 f0       	brlt	.+36     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	bc f0       	brlt	.+46     	; 0xbc0 <__fpcmp_parts_f+0x98>
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8d 91       	ld	r24, X+
     b96:	9d 91       	ld	r25, X+
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
     b9e:	24 81       	ldd	r18, Z+4	; 0x04
     ba0:	35 81       	ldd	r19, Z+5	; 0x05
     ba2:	46 81       	ldd	r20, Z+6	; 0x06
     ba4:	57 81       	ldd	r21, Z+7	; 0x07
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	4a 07       	cpc	r20, r26
     bac:	5b 07       	cpc	r21, r27
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <__fpcmp_parts_f+0x8e>
     bb0:	11 23       	and	r17, r17
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__fpcmp_parts_f+0xa2>
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	a4 07       	cpc	r26, r20
     bbc:	b5 07       	cpc	r27, r21
     bbe:	40 f4       	brcc	.+16     	; 0xbd0 <__fpcmp_parts_f+0xa8>
     bc0:	11 23       	and	r17, r17
     bc2:	19 f0       	breq	.+6      	; 0xbca <__fpcmp_parts_f+0xa2>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__fpcmp_parts_f+0xac>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	7f ef       	ldi	r23, 0xFF	; 255
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__fpcmp_parts_f+0xac>
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <TIMER0_calc_ms>:
 *******************************************************************************/

#include "timer0.h"

STD_ReturnType TIMER0_calc_ms(uint16 time_ms)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	28 97       	sbiw	r28, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	8f 83       	std	Y+7, r24	; 0x07
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8e 83       	std	Y+6, r24	; 0x06
	SET_BIT(TCCR0, FOC0);
     bf6:	a3 e5       	ldi	r26, 0x53	; 83
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e3 e5       	ldi	r30, 0x53	; 83
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
	/* Choose CTC mode */
	TIMER0_CTC_MODE_ENABLE();
     c04:	a3 e5       	ldi	r26, 0x53	; 83
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e3 e5       	ldi	r30, 0x53	; 83
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	8c 93       	st	X, r24
     c12:	a3 e5       	ldi	r26, 0x53	; 83
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e3 e5       	ldi	r30, 0x53	; 83
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7b       	andi	r24, 0xBF	; 191
     c1e:	8c 93       	st	X, r24

	uint32 time_us = (uint32)time_ms * 1000;
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	98 85       	ldd	r25, Y+8	; 0x08
     c24:	cc 01       	movw	r24, r24
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	28 ee       	ldi	r18, 0xE8	; 232
     c2c:	33 e0       	ldi	r19, 0x03	; 3
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulsi3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	8a 83       	std	Y+2, r24	; 0x02
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	ac 83       	std	Y+4, r26	; 0x04
     c44:	bd 83       	std	Y+5, r27	; 0x05

	/* create a variable to store the number of ticks required */
	uint8 no_ticks  =  0 ;
     c46:	19 82       	std	Y+1, r1	; 0x01

	/* check if time required can be calculated without prescaler */
	if (time_us < TIMER0_NO_PRESCALER_OVF_TIME )
     c48:	6a 81       	ldd	r22, Y+2	; 0x02
     c4a:	7b 81       	ldd	r23, Y+3	; 0x03
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	9d 81       	ldd	r25, Y+5	; 0x05
     c50:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	bc 01       	movw	r22, r24
     c5a:	cd 01       	movw	r24, r26
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	53 e4       	ldi	r21, 0x43	; 67
     c64:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__ltsf2>
     c68:	88 23       	and	r24, r24
     c6a:	c4 f4       	brge	.+48     	; 0xc9c <TIMER0_calc_ms+0xc2>
	{
		TIMER0_SET_PRESCALER(TIMER0_NO_PRESCALER);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	88 7f       	andi	r24, 0xF8	; 248
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	8c 93       	st	X, r24
		no_ticks = (uint8)(time_us / TIMER0_NO_PRESCALER_TICK_TIME);
     c7c:	6a 81       	ldd	r22, Y+2	; 0x02
     c7e:	7b 81       	ldd	r23, Y+3	; 0x03
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	d1 c0       	rjmp	.+418    	; 0xe3e <TIMER0_calc_ms+0x264>
	}

	/* check if time required can be calculated with prescaler of 8*/
	else if (time_us < TIMER0_PRESCALER_8_OVF_TIME)
     c9c:	6a 81       	ldd	r22, Y+2	; 0x02
     c9e:	7b 81       	ldd	r23, Y+3	; 0x03
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	55 e4       	ldi	r21, 0x45	; 69
     cb8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__ltsf2>
     cbc:	88 23       	and	r24, r24
     cbe:	14 f5       	brge	.+68     	; 0xd04 <TIMER0_calc_ms+0x12a>
	{
		TIMER0_SET_PRESCALER(TIMER0_PRESCALER_8);
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 7f       	andi	r24, 0xF8	; 248
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	8c 93       	st	X, r24
		no_ticks = (uint8)(time_us / TIMER0_PRESCALER_8_TICK_TIME);
     cd0:	6a 81       	ldd	r22, Y+2	; 0x02
     cd2:	7b 81       	ldd	r23, Y+3	; 0x03
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	51 e4       	ldi	r21, 0x41	; 65
     cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	9d c0       	rjmp	.+314    	; 0xe3e <TIMER0_calc_ms+0x264>
	}

	/* check if time required can be calculated with prescaler of 64*/
	else if(time_us < TIMER0_PRESCALER_64_OVF_TIME)
     d04:	6a 81       	ldd	r22, Y+2	; 0x02
     d06:	7b 81       	ldd	r23, Y+3	; 0x03
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	56 e4       	ldi	r21, 0x46	; 70
     d20:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	14 f5       	brge	.+68     	; 0xd6c <TIMER0_calc_ms+0x192>
	{
		TIMER0_SET_PRESCALER(TIMER0_PRESCALER_64);
     d28:	a3 e5       	ldi	r26, 0x53	; 83
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	88 7f       	andi	r24, 0xF8	; 248
     d34:	83 60       	ori	r24, 0x03	; 3
     d36:	8c 93       	st	X, r24
		no_ticks = (uint8)((time_us) / TIMER0_PRESCALER_64_TICK_TIME);
     d38:	6a 81       	ldd	r22, Y+2	; 0x02
     d3a:	7b 81       	ldd	r23, Y+3	; 0x03
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	52 e4       	ldi	r21, 0x42	; 66
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	69 c0       	rjmp	.+210    	; 0xe3e <TIMER0_calc_ms+0x264>
	}

	/* check if time required can be calculated with prescaler of 256*/
	else if(time_us < TIMER0_PRESCALER_256_OVF_TIME)
     d6c:	6a 81       	ldd	r22, Y+2	; 0x02
     d6e:	7b 81       	ldd	r23, Y+3	; 0x03
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	9d 81       	ldd	r25, Y+5	; 0x05
     d74:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	57 e4       	ldi	r21, 0x47	; 71
     d88:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	14 f5       	brge	.+68     	; 0xdd4 <TIMER0_calc_ms+0x1fa>
	{
		TIMER0_SET_PRESCALER(TIMER0_PRESCALER_256);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 7f       	andi	r24, 0xF8	; 248
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	8c 93       	st	X, r24
		no_ticks = (uint8)(time_us / TIMER0_PRESCALER_256_TICK_TIME);
     da0:	6a 81       	ldd	r22, Y+2	; 0x02
     da2:	7b 81       	ldd	r23, Y+3	; 0x03
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	53 e4       	ldi	r21, 0x43	; 67
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	35 c0       	rjmp	.+106    	; 0xe3e <TIMER0_calc_ms+0x264>
	}

	/* check if time required can be calculated with prescaler of 1024*/
	else if (time_us < TIMER0_PRESCALER_1024_OVF_TIME)
     dd4:	6a 81       	ldd	r22, Y+2	; 0x02
     dd6:	7b 81       	ldd	r23, Y+3	; 0x03
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	58 e4       	ldi	r21, 0x48	; 72
     df0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	14 f5       	brge	.+68     	; 0xe3c <TIMER0_calc_ms+0x262>
	{
		TIMER0_SET_PRESCALER(TIMER0_PRESCALER_1024);
     df8:	a3 e5       	ldi	r26, 0x53	; 83
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 7f       	andi	r24, 0xF8	; 248
     e04:	85 60       	ori	r24, 0x05	; 5
     e06:	8c 93       	st	X, r24
		no_ticks = (uint8)(time_us / TIMER0_PRESCALER_1024_TICK_TIME);
     e08:	6a 81       	ldd	r22, Y+2	; 0x02
     e0a:	7b 81       	ldd	r23, Y+3	; 0x03
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	54 e4       	ldi	r21, 0x44	; 68
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <TIMER0_calc_ms+0x264>
	}

	else
	{
		error_status = E_NOT_OK;
     e3c:	1e 82       	std	Y+6, r1	; 0x06
	}

	TCNT0 = 0;
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	10 82       	st	Z, r1
	OCR0 = no_ticks;
     e44:	ec e5       	ldi	r30, 0x5C	; 92
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	80 83       	st	Z, r24


	return error_status;
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e4e:	28 96       	adiw	r28, 0x08	; 8
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <INTERRUPT_EXTI0_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI0_setTrigger(const interrupt_trigger_t trigger)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <INTERRUPT_EXTI0_setTrigger+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <INTERRUPT_EXTI0_setTrigger+0x8>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	89 83       	std	Y+1, r24	; 0x01

	/* check required trigger */
	switch(trigger)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3c 83       	std	Y+4, r19	; 0x04
     e7a:	2b 83       	std	Y+3, r18	; 0x03
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	e9 f0       	breq	.+58     	; 0xec0 <INTERRUPT_EXTI0_setTrigger+0x60>
     e86:	2b 81       	ldd	r18, Y+3	; 0x03
     e88:	3c 81       	ldd	r19, Y+4	; 0x04
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	2c f4       	brge	.+10     	; 0xe9a <INTERRUPT_EXTI0_setTrigger+0x3a>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	61 f0       	breq	.+24     	; 0xeb0 <INTERRUPT_EXTI0_setTrigger+0x50>
     e98:	2d c0       	rjmp	.+90     	; 0xef4 <INTERRUPT_EXTI0_setTrigger+0x94>
     e9a:	2b 81       	ldd	r18, Y+3	; 0x03
     e9c:	3c 81       	ldd	r19, Y+4	; 0x04
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	31 05       	cpc	r19, r1
     ea2:	b9 f0       	breq	.+46     	; 0xed2 <INTERRUPT_EXTI0_setTrigger+0x72>
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	91 05       	cpc	r25, r1
     eac:	d9 f0       	breq	.+54     	; 0xee4 <INTERRUPT_EXTI0_setTrigger+0x84>
     eae:	22 c0       	rjmp	.+68     	; 0xef4 <INTERRUPT_EXTI0_setTrigger+0x94>
	{
	case LOW_LEVEL:
		MCUCR = (MCUCR & 0xFC) | (0x00); 					/* modify ISC01 && ISC00 only to 0,0 */
     eb0:	a5 e5       	ldi	r26, 0x55	; 85
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e5       	ldi	r30, 0x55	; 85
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8c 7f       	andi	r24, 0xFC	; 252
     ebc:	8c 93       	st	X, r24
     ebe:	1b c0       	rjmp	.+54     	; 0xef6 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case ANY_LOGICAL_CHANGE:
		MCUCR = (MCUCR & 0xFC) | (0x01); 					/* modify ISC01 && ISC00 only to 0,1 */
     ec0:	a5 e5       	ldi	r26, 0x55	; 85
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e5 e5       	ldi	r30, 0x55	; 85
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8c 7f       	andi	r24, 0xFC	; 252
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	8c 93       	st	X, r24
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case FALLING_EDGE:
		MCUCR = (MCUCR & 0xFC) | (0x02); 					/* modify ISC01 && ISC00 only to 1,0 */
     ed2:	a5 e5       	ldi	r26, 0x55	; 85
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e5       	ldi	r30, 0x55	; 85
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8c 7f       	andi	r24, 0xFC	; 252
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	8c 93       	st	X, r24
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case RISING_EGDE:
		MCUCR = (MCUCR & 0xFC) | (0x03); 					/* modify ISC01 && ISC00 only to 1,1 */
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	83 60       	ori	r24, 0x03	; 3
     ef0:	8c 93       	st	X, r24
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	default:
		error_status = E_NOT_OK;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_status;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <INTERRUPT_EXTI1_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI1_setTrigger(const interrupt_trigger_t trigger)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <INTERRUPT_EXTI1_setTrigger+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <INTERRUPT_EXTI1_setTrigger+0x8>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01

	/* check required trigger */
	switch(trigger)
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3c 83       	std	Y+4, r19	; 0x04
     f20:	2b 83       	std	Y+3, r18	; 0x03
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	e9 f0       	breq	.+58     	; 0xf66 <INTERRUPT_EXTI1_setTrigger+0x60>
     f2c:	2b 81       	ldd	r18, Y+3	; 0x03
     f2e:	3c 81       	ldd	r19, Y+4	; 0x04
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	2c f4       	brge	.+10     	; 0xf40 <INTERRUPT_EXTI1_setTrigger+0x3a>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f0       	breq	.+24     	; 0xf56 <INTERRUPT_EXTI1_setTrigger+0x50>
     f3e:	2d c0       	rjmp	.+90     	; 0xf9a <INTERRUPT_EXTI1_setTrigger+0x94>
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	b9 f0       	breq	.+46     	; 0xf78 <INTERRUPT_EXTI1_setTrigger+0x72>
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	d9 f0       	breq	.+54     	; 0xf8a <INTERRUPT_EXTI1_setTrigger+0x84>
     f54:	22 c0       	rjmp	.+68     	; 0xf9a <INTERRUPT_EXTI1_setTrigger+0x94>
	{
	case LOW_LEVEL:
		MCUCR = (MCUCR & 0xF3) | (0x00); 					/* modify ISC11 && ISC10 only to 0,0 */
     f56:	a5 e5       	ldi	r26, 0x55	; 85
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e5       	ldi	r30, 0x55	; 85
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	83 7f       	andi	r24, 0xF3	; 243
     f62:	8c 93       	st	X, r24
     f64:	1b c0       	rjmp	.+54     	; 0xf9c <INTERRUPT_EXTI1_setTrigger+0x96>
		break;

	case ANY_LOGICAL_CHANGE:
		MCUCR = (MCUCR & 0xF3) | (0x04); 					/* modify ISC11 && ISC10 only to 0,1 */
     f66:	a5 e5       	ldi	r26, 0x55	; 85
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e5       	ldi	r30, 0x55	; 85
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	83 7f       	andi	r24, 0xF3	; 243
     f72:	84 60       	ori	r24, 0x04	; 4
     f74:	8c 93       	st	X, r24
     f76:	12 c0       	rjmp	.+36     	; 0xf9c <INTERRUPT_EXTI1_setTrigger+0x96>
		break;

	case FALLING_EDGE:
		MCUCR = (MCUCR & 0xF3) | (0x08); 					/* modify ISC11 && ISC10 only to 1,0 */
     f78:	a5 e5       	ldi	r26, 0x55	; 85
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e5       	ldi	r30, 0x55	; 85
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	83 7f       	andi	r24, 0xF3	; 243
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	8c 93       	st	X, r24
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <INTERRUPT_EXTI1_setTrigger+0x96>
		break;

	case RISING_EGDE:
		MCUCR = (MCUCR & 0xF3) | (0x0C); 					/* modify ISC11 && ISC10 only to 1,1 */
     f8a:	a5 e5       	ldi	r26, 0x55	; 85
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e5 e5       	ldi	r30, 0x55	; 85
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8c 60       	ori	r24, 0x0C	; 12
     f96:	8c 93       	st	X, r24
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <INTERRUPT_EXTI1_setTrigger+0x96>
		break;

	default:
		error_status = E_NOT_OK;
     f9a:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_status;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <INTERRUPT_EXTI2_setTrigger>:
 *
 */


STD_ReturnType INTERRUPT_EXTI2_setTrigger(const interrupt_trigger_t trigger)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <INTERRUPT_EXTI2_setTrigger+0x6>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <INTERRUPT_EXTI2_setTrigger+0x8>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01

	/* check required trigger */
	switch(trigger)
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3c 83       	std	Y+4, r19	; 0x04
     fc6:	2b 83       	std	Y+3, r18	; 0x03
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	31 f0       	breq	.+12     	; 0xfde <INTERRUPT_EXTI2_setTrigger+0x32>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	23 30       	cpi	r18, 0x03	; 3
     fd8:	31 05       	cpc	r19, r1
     fda:	49 f0       	breq	.+18     	; 0xfee <INTERRUPT_EXTI2_setTrigger+0x42>
     fdc:	10 c0       	rjmp	.+32     	; 0xffe <INTERRUPT_EXTI2_setTrigger+0x52>
	{
	case FALLING_EDGE:
		CLR_BIT(MCUCSR, ISC2);
     fde:	a4 e5       	ldi	r26, 0x54	; 84
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e5       	ldi	r30, 0x54	; 84
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7b       	andi	r24, 0xBF	; 191
     fea:	8c 93       	st	X, r24
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <INTERRUPT_EXTI2_setTrigger+0x54>
		break;

	case RISING_EGDE:
		SET_BIT(MCUCSR, ISC2);
     fee:	a4 e5       	ldi	r26, 0x54	; 84
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e4 e5       	ldi	r30, 0x54	; 84
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	8c 93       	st	X, r24
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <INTERRUPT_EXTI2_setTrigger+0x54>
		break;

	default:
		error_status = E_NOT_OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_status;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <INTERRUPT_EXTI0_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT0_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI0_setCallback(void (* pf_ISR) (void)){
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <INTERRUPT_EXTI0_setCallback+0x6>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9b 83       	std	Y+3, r25	; 0x03
    101e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	11 f4       	brne	.+4      	; 0x1030 <INTERRUPT_EXTI0_setCallback+0x20>
	{
		error_status = E_NOT_OK;
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	06 c0       	rjmp	.+12     	; 0x103c <INTERRUPT_EXTI0_setCallback+0x2c>
	}
	else
	{
		pf_EXTI0_callBack = pf_ISR;
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	90 93 87 01 	sts	0x0187, r25
    1038:	80 93 86 01 	sts	0x0186, r24
	}
	return error_status;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <INTERRUPT_EXTI1_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT1_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI1_setCallback(void (* pf_ISR) (void)){
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <INTERRUPT_EXTI1_setCallback+0x6>
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	11 f4       	brne	.+4      	; 0x106a <INTERRUPT_EXTI1_setCallback+0x20>
	{
		error_status = E_NOT_OK;
    1066:	19 82       	std	Y+1, r1	; 0x01
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <INTERRUPT_EXTI1_setCallback+0x2c>
	}
	else
	{
		pf_EXTI1_callBack = pf_ISR;
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	90 93 89 01 	sts	0x0189, r25
    1072:	80 93 88 01 	sts	0x0188, r24
	}
	return error_status;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <INTERRUPT_EXTI2_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT2_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI2_setCallback(void (* pf_ISR) (void)){
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <INTERRUPT_EXTI2_setCallback+0x6>
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	9b 83       	std	Y+3, r25	; 0x03
    1092:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	11 f4       	brne	.+4      	; 0x10a4 <INTERRUPT_EXTI2_setCallback+0x20>
	{
		error_status = E_NOT_OK;
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <INTERRUPT_EXTI2_setCallback+0x2c>
	}
	else
	{
		pf_EXTI2_callBack = pf_ISR;
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	90 93 8b 01 	sts	0x018B, r25
    10ac:	80 93 8a 01 	sts	0x018A, r24
	}
	return error_status;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <INTERRUPT_ADC_setCallback>:

STD_ReturnType INTERRUPT_ADC_setCallback(void (* pf_ISR) (void))
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <INTERRUPT_ADC_setCallback+0x6>
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == pf_ISR)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	11 f4       	brne	.+4      	; 0x10de <INTERRUPT_ADC_setCallback+0x20>
	{
		error_status = E_NOT_OK;
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <INTERRUPT_ADC_setCallback+0x2c>
	}
	else
	{
		pf_ADC_callBack = pf_ISR;
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	90 93 8d 01 	sts	0x018D, r25
    10e6:	80 93 8c 01 	sts	0x018C, r24
	}
	return error_status;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <INTERRUPT_TIMER0_OCF_setCallback>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_TIMER0_OCF_setCallback(void (* pf_ISR) (void))
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <INTERRUPT_TIMER0_OCF_setCallback+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9b 83       	std	Y+3, r25	; 0x03
    1106:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == pf_ISR)
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	11 f4       	brne	.+4      	; 0x1118 <INTERRUPT_TIMER0_OCF_setCallback+0x20>
	{
		error_status = E_NOT_OK;
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <INTERRUPT_TIMER0_OCF_setCallback+0x2c>
	}
	else
	{
		pf_TIMER0_OCF_callBack = pf_ISR;
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	90 93 8f 01 	sts	0x018F, r25
    1120:	80 93 8e 01 	sts	0x018E, r24
	}
	return error_status;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <__vector_1>:


ISR (INT0_vect)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	if(pf_EXTI0_callBack != NULL)
    115c:	80 91 86 01 	lds	r24, 0x0186
    1160:	90 91 87 01 	lds	r25, 0x0187
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	29 f0       	breq	.+10     	; 0x1172 <__vector_1+0x40>
	{
		pf_EXTI0_callBack();
    1168:	e0 91 86 01 	lds	r30, 0x0186
    116c:	f0 91 87 01 	lds	r31, 0x0187
    1170:	09 95       	icall
	}
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_2>:

ISR (INT1_vect)
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	if(pf_EXTI1_callBack != NULL)
    11c2:	80 91 88 01 	lds	r24, 0x0188
    11c6:	90 91 89 01 	lds	r25, 0x0189
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <__vector_2+0x40>
	{
		pf_EXTI1_callBack();
    11ce:	e0 91 88 01 	lds	r30, 0x0188
    11d2:	f0 91 89 01 	lds	r31, 0x0189
    11d6:	09 95       	icall
	}
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_3>:

ISR (INT2_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	if(pf_EXTI2_callBack != NULL)
    1228:	80 91 8a 01 	lds	r24, 0x018A
    122c:	90 91 8b 01 	lds	r25, 0x018B
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	29 f0       	breq	.+10     	; 0x123e <__vector_3+0x40>
	{
		pf_EXTI2_callBack();
    1234:	e0 91 8a 01 	lds	r30, 0x018A
    1238:	f0 91 8b 01 	lds	r31, 0x018B
    123c:	09 95       	icall
	}
}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_16>:

ISR (ADC_vect)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	if(pf_ADC_callBack != NULL)
    128e:	80 91 8c 01 	lds	r24, 0x018C
    1292:	90 91 8d 01 	lds	r25, 0x018D
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	29 f0       	breq	.+10     	; 0x12a4 <__vector_16+0x40>
	{
		pf_ADC_callBack();
    129a:	e0 91 8c 01 	lds	r30, 0x018C
    129e:	f0 91 8d 01 	lds	r31, 0x018D
    12a2:	09 95       	icall
	}
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	if(pf_TIMER0_OCF_callBack != NULL)
    12f4:	80 91 8e 01 	lds	r24, 0x018E
    12f8:	90 91 8f 01 	lds	r25, 0x018F
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	29 f0       	breq	.+10     	; 0x130a <__vector_10+0x40>
	{
		pf_TIMER0_OCF_callBack();
    1300:	e0 91 8e 01 	lds	r30, 0x018E
    1304:	f0 91 8f 01 	lds	r31, 0x018F
    1308:	09 95       	icall
	}
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <GPIO_pinInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinInit(const pin_obj_t * pin_obj)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	27 97       	sbiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	11 f4       	brne	.+4      	; 0x1358 <GPIO_pinInit+0x28>
	{
		error_status = E_NOT_OK;
    1354:	19 82       	std	Y+1, r1	; 0x01
    1356:	ea c0       	rjmp	.+468    	; 0x152c <GPIO_pinInit+0x1fc>
	}
	else
	{
		/* check the required pin direction */
		switch (pin_obj->direction)
    1358:	ea 81       	ldd	r30, Y+2	; 0x02
    135a:	fb 81       	ldd	r31, Y+3	; 0x03
    135c:	80 81       	ld	r24, Z
    135e:	82 95       	swap	r24
    1360:	86 95       	lsr	r24
    1362:	87 70       	andi	r24, 0x07	; 7
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3f 83       	std	Y+7, r19	; 0x07
    136c:	2e 83       	std	Y+6, r18	; 0x06
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	31 f0       	breq	.+12     	; 0x1382 <GPIO_pinInit+0x52>
    1376:	2e 81       	ldd	r18, Y+6	; 0x06
    1378:	3f 81       	ldd	r19, Y+7	; 0x07
    137a:	21 30       	cpi	r18, 0x01	; 1
    137c:	31 05       	cpc	r19, r1
    137e:	91 f1       	breq	.+100    	; 0x13e4 <GPIO_pinInit+0xb4>
    1380:	5f c0       	rjmp	.+190    	; 0x1440 <GPIO_pinInit+0x110>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    1382:	ea 81       	ldd	r30, Y+2	; 0x02
    1384:	fb 81       	ldd	r31, Y+3	; 0x03
    1386:	80 81       	ld	r24, Z
    1388:	83 70       	andi	r24, 0x03	; 3
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	fc 01       	movw	r30, r24
    1394:	e8 59       	subi	r30, 0x98	; 152
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	a0 81       	ld	r26, Z
    139a:	b1 81       	ldd	r27, Z+1	; 0x01
    139c:	ea 81       	ldd	r30, Y+2	; 0x02
    139e:	fb 81       	ldd	r31, Y+3	; 0x03
    13a0:	80 81       	ld	r24, Z
    13a2:	83 70       	andi	r24, 0x03	; 3
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	fc 01       	movw	r30, r24
    13ae:	e8 59       	subi	r30, 0x98	; 152
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	01 90       	ld	r0, Z+
    13b4:	f0 81       	ld	r31, Z
    13b6:	e0 2d       	mov	r30, r0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	ea 81       	ldd	r30, Y+2	; 0x02
    13be:	fb 81       	ldd	r31, Y+3	; 0x03
    13c0:	80 81       	ld	r24, Z
    13c2:	86 95       	lsr	r24
    13c4:	86 95       	lsr	r24
    13c6:	87 70       	andi	r24, 0x07	; 7
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_pinInit+0xa8>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_pinInit+0xa4>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	2e c0       	rjmp	.+92     	; 0x1440 <GPIO_pinInit+0x110>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	80 81       	ld	r24, Z
    13ea:	83 70       	andi	r24, 0x03	; 3
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	fc 01       	movw	r30, r24
    13f6:	e8 59       	subi	r30, 0x98	; 152
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	a0 81       	ld	r26, Z
    13fc:	b1 81       	ldd	r27, Z+1	; 0x01
    13fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1400:	fb 81       	ldd	r31, Y+3	; 0x03
    1402:	80 81       	ld	r24, Z
    1404:	83 70       	andi	r24, 0x03	; 3
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	fc 01       	movw	r30, r24
    1410:	e8 59       	subi	r30, 0x98	; 152
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	01 90       	ld	r0, Z+
    1416:	f0 81       	ld	r31, Z
    1418:	e0 2d       	mov	r30, r0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	ea 81       	ldd	r30, Y+2	; 0x02
    1420:	fb 81       	ldd	r31, Y+3	; 0x03
    1422:	80 81       	ld	r24, Z
    1424:	86 95       	lsr	r24
    1426:	86 95       	lsr	r24
    1428:	87 70       	andi	r24, 0x07	; 7
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_pinInit+0x108>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	2a 95       	dec	r18
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_pinInit+0x104>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}

		/* check the required pin logic */
		switch(pin_obj->logic)
    1440:	ea 81       	ldd	r30, Y+2	; 0x02
    1442:	fb 81       	ldd	r31, Y+3	; 0x03
    1444:	80 81       	ld	r24, Z
    1446:	82 95       	swap	r24
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	83 70       	andi	r24, 0x03	; 3
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	31 f0       	breq	.+12     	; 0x146c <GPIO_pinInit+0x13c>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	91 f1       	breq	.+100    	; 0x14ce <GPIO_pinInit+0x19e>
    146a:	60 c0       	rjmp	.+192    	; 0x152c <GPIO_pinInit+0x1fc>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    146c:	ea 81       	ldd	r30, Y+2	; 0x02
    146e:	fb 81       	ldd	r31, Y+3	; 0x03
    1470:	80 81       	ld	r24, Z
    1472:	83 70       	andi	r24, 0x03	; 3
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	fc 01       	movw	r30, r24
    147e:	e0 59       	subi	r30, 0x90	; 144
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	a0 81       	ld	r26, Z
    1484:	b1 81       	ldd	r27, Z+1	; 0x01
    1486:	ea 81       	ldd	r30, Y+2	; 0x02
    1488:	fb 81       	ldd	r31, Y+3	; 0x03
    148a:	80 81       	ld	r24, Z
    148c:	83 70       	andi	r24, 0x03	; 3
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	fc 01       	movw	r30, r24
    1498:	e0 59       	subi	r30, 0x90	; 144
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	01 90       	ld	r0, Z+
    149e:	f0 81       	ld	r31, Z
    14a0:	e0 2d       	mov	r30, r0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	ea 81       	ldd	r30, Y+2	; 0x02
    14a8:	fb 81       	ldd	r31, Y+3	; 0x03
    14aa:	80 81       	ld	r24, Z
    14ac:	86 95       	lsr	r24
    14ae:	86 95       	lsr	r24
    14b0:	87 70       	andi	r24, 0x07	; 7
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <GPIO_pinInit+0x192>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <GPIO_pinInit+0x18e>
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	2f c0       	rjmp	.+94     	; 0x152c <GPIO_pinInit+0x1fc>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    14ce:	ea 81       	ldd	r30, Y+2	; 0x02
    14d0:	fb 81       	ldd	r31, Y+3	; 0x03
    14d2:	80 81       	ld	r24, Z
    14d4:	83 70       	andi	r24, 0x03	; 3
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	fc 01       	movw	r30, r24
    14e0:	e0 59       	subi	r30, 0x90	; 144
    14e2:	fe 4f       	sbci	r31, 0xFE	; 254
    14e4:	a0 81       	ld	r26, Z
    14e6:	b1 81       	ldd	r27, Z+1	; 0x01
    14e8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ea:	fb 81       	ldd	r31, Y+3	; 0x03
    14ec:	80 81       	ld	r24, Z
    14ee:	83 70       	andi	r24, 0x03	; 3
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	fc 01       	movw	r30, r24
    14fa:	e0 59       	subi	r30, 0x90	; 144
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	01 90       	ld	r0, Z+
    1500:	f0 81       	ld	r31, Z
    1502:	e0 2d       	mov	r30, r0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	ea 81       	ldd	r30, Y+2	; 0x02
    150a:	fb 81       	ldd	r31, Y+3	; 0x03
    150c:	80 81       	ld	r24, Z
    150e:	86 95       	lsr	r24
    1510:	86 95       	lsr	r24
    1512:	87 70       	andi	r24, 0x07	; 7
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_pinInit+0x1f4>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_pinInit+0x1f0>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
			/* default:
					error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    152c:	89 81       	ldd	r24, Y+1	; 0x01

}
    152e:	27 96       	adiw	r28, 0x07	; 7
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <GPIO_pinDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinDirectionInit(const pin_obj_t * pin_obj, GPIO_direction_t direction)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <GPIO_pinDirectionInit+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <GPIO_pinDirectionInit+0x8>
    1548:	00 d0       	rcall	.+0      	; 0x154a <GPIO_pinDirectionInit+0xa>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9b 83       	std	Y+3, r25	; 0x03
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	11 f4       	brne	.+4      	; 0x1564 <GPIO_pinDirectionInit+0x24>
	{
		error_status = E_NOT_OK;
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	6f c0       	rjmp	.+222    	; 0x1642 <GPIO_pinDirectionInit+0x102>
	}
	else
	{
		/* check the required pin direction */
		switch (direction)
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3e 83       	std	Y+6, r19	; 0x06
    156c:	2d 83       	std	Y+5, r18	; 0x05
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	31 f0       	breq	.+12     	; 0x1582 <GPIO_pinDirectionInit+0x42>
    1576:	2d 81       	ldd	r18, Y+5	; 0x05
    1578:	3e 81       	ldd	r19, Y+6	; 0x06
    157a:	21 30       	cpi	r18, 0x01	; 1
    157c:	31 05       	cpc	r19, r1
    157e:	91 f1       	breq	.+100    	; 0x15e4 <GPIO_pinDirectionInit+0xa4>
    1580:	60 c0       	rjmp	.+192    	; 0x1642 <GPIO_pinDirectionInit+0x102>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    1582:	ea 81       	ldd	r30, Y+2	; 0x02
    1584:	fb 81       	ldd	r31, Y+3	; 0x03
    1586:	80 81       	ld	r24, Z
    1588:	83 70       	andi	r24, 0x03	; 3
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	fc 01       	movw	r30, r24
    1594:	e8 59       	subi	r30, 0x98	; 152
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	a0 81       	ld	r26, Z
    159a:	b1 81       	ldd	r27, Z+1	; 0x01
    159c:	ea 81       	ldd	r30, Y+2	; 0x02
    159e:	fb 81       	ldd	r31, Y+3	; 0x03
    15a0:	80 81       	ld	r24, Z
    15a2:	83 70       	andi	r24, 0x03	; 3
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	fc 01       	movw	r30, r24
    15ae:	e8 59       	subi	r30, 0x98	; 152
    15b0:	fe 4f       	sbci	r31, 0xFE	; 254
    15b2:	01 90       	ld	r0, Z+
    15b4:	f0 81       	ld	r31, Z
    15b6:	e0 2d       	mov	r30, r0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	ea 81       	ldd	r30, Y+2	; 0x02
    15be:	fb 81       	ldd	r31, Y+3	; 0x03
    15c0:	80 81       	ld	r24, Z
    15c2:	86 95       	lsr	r24
    15c4:	86 95       	lsr	r24
    15c6:	87 70       	andi	r24, 0x07	; 7
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_pinDirectionInit+0x98>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_pinDirectionInit+0x94>
    15dc:	80 95       	com	r24
    15de:	84 23       	and	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	2f c0       	rjmp	.+94     	; 0x1642 <GPIO_pinDirectionInit+0x102>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    15e4:	ea 81       	ldd	r30, Y+2	; 0x02
    15e6:	fb 81       	ldd	r31, Y+3	; 0x03
    15e8:	80 81       	ld	r24, Z
    15ea:	83 70       	andi	r24, 0x03	; 3
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	fc 01       	movw	r30, r24
    15f6:	e8 59       	subi	r30, 0x98	; 152
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	a0 81       	ld	r26, Z
    15fc:	b1 81       	ldd	r27, Z+1	; 0x01
    15fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1600:	fb 81       	ldd	r31, Y+3	; 0x03
    1602:	80 81       	ld	r24, Z
    1604:	83 70       	andi	r24, 0x03	; 3
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	fc 01       	movw	r30, r24
    1610:	e8 59       	subi	r30, 0x98	; 152
    1612:	fe 4f       	sbci	r31, 0xFE	; 254
    1614:	01 90       	ld	r0, Z+
    1616:	f0 81       	ld	r31, Z
    1618:	e0 2d       	mov	r30, r0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	ea 81       	ldd	r30, Y+2	; 0x02
    1620:	fb 81       	ldd	r31, Y+3	; 0x03
    1622:	80 81       	ld	r24, Z
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	87 70       	andi	r24, 0x07	; 7
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_pinDirectionInit+0xfa>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_pinDirectionInit+0xf6>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
			 * so, there is no need for default case in here */
			/* default:
					error_status = E_NOT_OK;*/
		}
	}
	return error_status;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
}
    1644:	26 96       	adiw	r28, 0x06	; 6
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <GPIO_pinGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinGetDirection(const pin_obj_t * pin_obj, GPIO_direction_t * direction)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_pinGetDirection+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <GPIO_pinGetDirection+0x8>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	7d 83       	std	Y+5, r23	; 0x05
    166a:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	11 f4       	brne	.+4      	; 0x167c <GPIO_pinGetDirection+0x26>
	{
		error_status = E_NOT_OK;
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	24 c0       	rjmp	.+72     	; 0x16c4 <GPIO_pinGetDirection+0x6e>
	}
	else
	{
		/* update the passed argument with the current pin state */
		*direction = READ_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    167c:	ea 81       	ldd	r30, Y+2	; 0x02
    167e:	fb 81       	ldd	r31, Y+3	; 0x03
    1680:	80 81       	ld	r24, Z
    1682:	83 70       	andi	r24, 0x03	; 3
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	fc 01       	movw	r30, r24
    168e:	e8 59       	subi	r30, 0x98	; 152
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	01 90       	ld	r0, Z+
    1694:	f0 81       	ld	r31, Z
    1696:	e0 2d       	mov	r30, r0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	ea 81       	ldd	r30, Y+2	; 0x02
    16a0:	fb 81       	ldd	r31, Y+3	; 0x03
    16a2:	80 81       	ld	r24, Z
    16a4:	86 95       	lsr	r24
    16a6:	86 95       	lsr	r24
    16a8:	87 70       	andi	r24, 0x07	; 7
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <GPIO_pinGetDirection+0x60>
    16b2:	55 95       	asr	r21
    16b4:	47 95       	ror	r20
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <GPIO_pinGetDirection+0x5c>
    16ba:	ca 01       	movw	r24, r20
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	ec 81       	ldd	r30, Y+4	; 0x04
    16c0:	fd 81       	ldd	r31, Y+5	; 0x05
    16c2:	80 83       	st	Z, r24
	}

	return error_status;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <GPIO_pinWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinWrite(const pin_obj_t * pin_obj, GPIO_logic_t logic)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <GPIO_pinWrite+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <GPIO_pinWrite+0x8>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <GPIO_pinWrite+0xa>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	11 f4       	brne	.+4      	; 0x16fa <GPIO_pinWrite+0x24>
	{
		error_status = E_NOT_OK;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	6f c0       	rjmp	.+222    	; 0x17d8 <GPIO_pinWrite+0x102>
	}
	else
	{
		/* check the required pin logic */
		switch(logic)
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3e 83       	std	Y+6, r19	; 0x06
    1702:	2d 83       	std	Y+5, r18	; 0x05
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	31 f0       	breq	.+12     	; 0x1718 <GPIO_pinWrite+0x42>
    170c:	2d 81       	ldd	r18, Y+5	; 0x05
    170e:	3e 81       	ldd	r19, Y+6	; 0x06
    1710:	21 30       	cpi	r18, 0x01	; 1
    1712:	31 05       	cpc	r19, r1
    1714:	91 f1       	breq	.+100    	; 0x177a <GPIO_pinWrite+0xa4>
    1716:	60 c0       	rjmp	.+192    	; 0x17d8 <GPIO_pinWrite+0x102>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1718:	ea 81       	ldd	r30, Y+2	; 0x02
    171a:	fb 81       	ldd	r31, Y+3	; 0x03
    171c:	80 81       	ld	r24, Z
    171e:	83 70       	andi	r24, 0x03	; 3
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	e0 59       	subi	r30, 0x90	; 144
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	ea 81       	ldd	r30, Y+2	; 0x02
    1734:	fb 81       	ldd	r31, Y+3	; 0x03
    1736:	80 81       	ld	r24, Z
    1738:	83 70       	andi	r24, 0x03	; 3
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	fc 01       	movw	r30, r24
    1744:	e0 59       	subi	r30, 0x90	; 144
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	01 90       	ld	r0, Z+
    174a:	f0 81       	ld	r31, Z
    174c:	e0 2d       	mov	r30, r0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	ea 81       	ldd	r30, Y+2	; 0x02
    1754:	fb 81       	ldd	r31, Y+3	; 0x03
    1756:	80 81       	ld	r24, Z
    1758:	86 95       	lsr	r24
    175a:	86 95       	lsr	r24
    175c:	87 70       	andi	r24, 0x07	; 7
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_pinWrite+0x98>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_pinWrite+0x94>
    1772:	80 95       	com	r24
    1774:	84 23       	and	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	2f c0       	rjmp	.+94     	; 0x17d8 <GPIO_pinWrite+0x102>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    177a:	ea 81       	ldd	r30, Y+2	; 0x02
    177c:	fb 81       	ldd	r31, Y+3	; 0x03
    177e:	80 81       	ld	r24, Z
    1780:	83 70       	andi	r24, 0x03	; 3
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	fc 01       	movw	r30, r24
    178c:	e0 59       	subi	r30, 0x90	; 144
    178e:	fe 4f       	sbci	r31, 0xFE	; 254
    1790:	a0 81       	ld	r26, Z
    1792:	b1 81       	ldd	r27, Z+1	; 0x01
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	80 81       	ld	r24, Z
    179a:	83 70       	andi	r24, 0x03	; 3
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	fc 01       	movw	r30, r24
    17a6:	e0 59       	subi	r30, 0x90	; 144
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	01 90       	ld	r0, Z+
    17ac:	f0 81       	ld	r31, Z
    17ae:	e0 2d       	mov	r30, r0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	ea 81       	ldd	r30, Y+2	; 0x02
    17b6:	fb 81       	ldd	r31, Y+3	; 0x03
    17b8:	80 81       	ld	r24, Z
    17ba:	86 95       	lsr	r24
    17bc:	86 95       	lsr	r24
    17be:	87 70       	andi	r24, 0x07	; 7
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_pinWrite+0xfa>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_pinWrite+0xf6>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17da:	26 96       	adiw	r28, 0x06	; 6
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <GPIO_pinRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinRead(const pin_obj_t * pin_obj, GPIO_logic_t * logic)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_pinRead+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_pinRead+0x8>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	7d 83       	std	Y+5, r23	; 0x05
    1800:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	11 f4       	brne	.+4      	; 0x1812 <GPIO_pinRead+0x26>
	{
		error_status = E_NOT_OK;
    180e:	19 82       	std	Y+1, r1	; 0x01
    1810:	24 c0       	rjmp	.+72     	; 0x185a <GPIO_pinRead+0x6e>
	}
	else
	{
		*logic = READ_BIT(*(PIN_registers[pin_obj->port_id]), pin_obj->pin_id);
    1812:	ea 81       	ldd	r30, Y+2	; 0x02
    1814:	fb 81       	ldd	r31, Y+3	; 0x03
    1816:	80 81       	ld	r24, Z
    1818:	83 70       	andi	r24, 0x03	; 3
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	fc 01       	movw	r30, r24
    1824:	e8 58       	subi	r30, 0x88	; 136
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	01 90       	ld	r0, Z+
    182a:	f0 81       	ld	r31, Z
    182c:	e0 2d       	mov	r30, r0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	80 81       	ld	r24, Z
    183a:	86 95       	lsr	r24
    183c:	86 95       	lsr	r24
    183e:	87 70       	andi	r24, 0x07	; 7
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_pinRead+0x60>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_pinRead+0x5c>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	ec 81       	ldd	r30, Y+4	; 0x04
    1856:	fd 81       	ldd	r31, Y+5	; 0x05
    1858:	80 83       	st	Z, r24
	}

	return error_status;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <GPIO_pinToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinToggle(const pin_obj_t * pin_obj)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <GPIO_pinToggle+0x6>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	9b 83       	std	Y+3, r25	; 0x03
    187a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	9b 81       	ldd	r25, Y+3	; 0x03
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	11 f4       	brne	.+4      	; 0x188c <GPIO_pinToggle+0x20>
	{
		error_status = E_NOT_OK;
    1888:	19 82       	std	Y+1, r1	; 0x01
    188a:	2f c0       	rjmp	.+94     	; 0x18ea <GPIO_pinToggle+0x7e>
	}
	else
	{
		TOGGLE_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    188c:	ea 81       	ldd	r30, Y+2	; 0x02
    188e:	fb 81       	ldd	r31, Y+3	; 0x03
    1890:	80 81       	ld	r24, Z
    1892:	83 70       	andi	r24, 0x03	; 3
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	fc 01       	movw	r30, r24
    189e:	e0 59       	subi	r30, 0x90	; 144
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	a0 81       	ld	r26, Z
    18a4:	b1 81       	ldd	r27, Z+1	; 0x01
    18a6:	ea 81       	ldd	r30, Y+2	; 0x02
    18a8:	fb 81       	ldd	r31, Y+3	; 0x03
    18aa:	80 81       	ld	r24, Z
    18ac:	83 70       	andi	r24, 0x03	; 3
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	fc 01       	movw	r30, r24
    18b8:	e0 59       	subi	r30, 0x90	; 144
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	01 90       	ld	r0, Z+
    18be:	f0 81       	ld	r31, Z
    18c0:	e0 2d       	mov	r30, r0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	ea 81       	ldd	r30, Y+2	; 0x02
    18c8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ca:	80 81       	ld	r24, Z
    18cc:	86 95       	lsr	r24
    18ce:	86 95       	lsr	r24
    18d0:	87 70       	andi	r24, 0x07	; 7
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_pinToggle+0x76>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_pinToggle+0x72>
    18e6:	84 27       	eor	r24, r20
    18e8:	8c 93       	st	X, r24
	}

	return error_status;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <GPIO_portDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portDirectionInit(const port_id_t port, uint8 direction)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <GPIO_portDirectionInit+0x6>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	8a 83       	std	Y+2, r24	; 0x02
    1906:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	10 f0       	brcs	.+4      	; 0x1916 <GPIO_portDirectionInit+0x1e>
	{
		error_status = E_NOT_OK;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	0d c0       	rjmp	.+26     	; 0x1930 <GPIO_portDirectionInit+0x38>
	}
	else
	{
		*(DDR_registers[port]) = direction;
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	fc 01       	movw	r30, r24
    1922:	e8 59       	subi	r30, 0x98	; 152
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
    1926:	01 90       	ld	r0, Z+
    1928:	f0 81       	ld	r31, Z
    192a:	e0 2d       	mov	r30, r0
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	80 83       	st	Z, r24
	}
	return error_status;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <GPIO_portGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portGetDirection(const port_id_t port, uint8 * direction)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_portGetDirection+0x6>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <GPIO_portGetDirection+0x8>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	7c 83       	std	Y+4, r23	; 0x04
    194e:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	10 f0       	brcs	.+4      	; 0x195e <GPIO_portGetDirection+0x20>
	{
		error_status = E_NOT_OK;
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	0f c0       	rjmp	.+30     	; 0x197c <GPIO_portGetDirection+0x3e>
	}
	else
	{
		*direction = *(DDR_registers[port]);
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	fc 01       	movw	r30, r24
    196a:	e8 59       	subi	r30, 0x98	; 152
    196c:	fe 4f       	sbci	r31, 0xFE	; 254
    196e:	01 90       	ld	r0, Z+
    1970:	f0 81       	ld	r31, Z
    1972:	e0 2d       	mov	r30, r0
    1974:	80 81       	ld	r24, Z
    1976:	eb 81       	ldd	r30, Y+3	; 0x03
    1978:	fc 81       	ldd	r31, Y+4	; 0x04
    197a:	80 83       	st	Z, r24
	}
	return error_status;
    197c:	89 81       	ldd	r24, Y+1	; 0x01

}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <GPIO_portWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portWrite(const port_id_t port, uint8 logic)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_portWrite+0x6>
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
	/* check if port id is valid */

	if (port > PORT_MAX_NUMBER-1)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	10 f0       	brcs	.+4      	; 0x19aa <GPIO_portWrite+0x1e>
	{
		error_status = E_NOT_OK;
    19a6:	19 82       	std	Y+1, r1	; 0x01
    19a8:	0d c0       	rjmp	.+26     	; 0x19c4 <GPIO_portWrite+0x38>
	}
	else
	{
		*(PORT_registers[port]) = logic;
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	fc 01       	movw	r30, r24
    19b6:	e0 59       	subi	r30, 0x90	; 144
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	01 90       	ld	r0, Z+
    19bc:	f0 81       	ld	r31, Z
    19be:	e0 2d       	mov	r30, r0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	80 83       	st	Z, r24
	}
	return error_status;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <GPIO_portRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portRead(const port_id_t port, uint8 * logic)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <GPIO_portRead+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_portRead+0x8>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	7c 83       	std	Y+4, r23	; 0x04
    19e2:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	10 f0       	brcs	.+4      	; 0x19f2 <GPIO_portRead+0x20>
	{
		error_status = E_NOT_OK;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <GPIO_portRead+0x3e>
	}
	else
	{
		*logic = *(PORT_registers[port]);
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	fc 01       	movw	r30, r24
    19fe:	e0 59       	subi	r30, 0x90	; 144
    1a00:	fe 4f       	sbci	r31, 0xFE	; 254
    1a02:	01 90       	ld	r0, Z+
    1a04:	f0 81       	ld	r31, Z
    1a06:	e0 2d       	mov	r30, r0
    1a08:	80 81       	ld	r24, Z
    1a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0e:	80 83       	st	Z, r24
	}
	return error_status;
    1a10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <GPIO_portToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portToggle(const port_id_t port)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <GPIO_portToggle+0x6>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	10 f0       	brcs	.+4      	; 0x1a3a <GPIO_portToggle+0x1a>
	{
		error_status = E_NOT_OK;
    1a36:	19 82       	std	Y+1, r1	; 0x01
    1a38:	18 c0       	rjmp	.+48     	; 0x1a6a <GPIO_portToggle+0x4a>
	}

	else
	{
		/*toggle all port pins*/
		*(PORT_registers[port]) ^= 0xFF;
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	fc 01       	movw	r30, r24
    1a46:	e0 59       	subi	r30, 0x90	; 144
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	a0 81       	ld	r26, Z
    1a4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	fc 01       	movw	r30, r24
    1a5a:	e0 59       	subi	r30, 0x90	; 144
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	01 90       	ld	r0, Z+
    1a60:	f0 81       	ld	r31, Z
    1a62:	e0 2d       	mov	r30, r0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 95       	com	r24
    1a68:	8c 93       	st	X, r24
	}
	return error_status;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <LED_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_init(const led_t *led)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <LED_init+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <LED_init+0x8>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <LED_init+0x20>
	{
		error_status = E_NOT_OK;
    1a92:	19 82       	std	Y+1, r1	; 0x01
    1a94:	36 c0       	rjmp	.+108    	; 0x1b02 <LED_init+0x8c>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id,
				.direction = GPIO_OUTPUT, .logic = led->led_initial_state};
    1a96:	eb 81       	ldd	r30, Y+3	; 0x03
    1a98:	fc 81       	ldd	r31, Y+4	; 0x04
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	23 70       	andi	r18, 0x03	; 3
    1aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa4:	80 81       	ld	r24, Z
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	96 95       	lsr	r25
    1aaa:	96 95       	lsr	r25
    1aac:	97 70       	andi	r25, 0x07	; 7
    1aae:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab2:	80 81       	ld	r24, Z
    1ab4:	38 2f       	mov	r19, r24
    1ab6:	32 95       	swap	r19
    1ab8:	36 95       	lsr	r19
    1aba:	37 70       	andi	r19, 0x07	; 7
    1abc:	31 70       	andi	r19, 0x01	; 1
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	23 70       	andi	r18, 0x03	; 3
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	8c 7f       	andi	r24, 0xFC	; 252
    1ac6:	82 2b       	or	r24, r18
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	89 2f       	mov	r24, r25
    1acc:	87 70       	andi	r24, 0x07	; 7
    1ace:	98 2f       	mov	r25, r24
    1ad0:	99 0f       	add	r25, r25
    1ad2:	99 0f       	add	r25, r25
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	83 7e       	andi	r24, 0xE3	; 227
    1ad8:	89 2b       	or	r24, r25
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	80 62       	ori	r24, 0x20	; 32
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
    1ae2:	83 2f       	mov	r24, r19
    1ae4:	81 70       	andi	r24, 0x01	; 1
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	92 95       	swap	r25
    1aea:	99 0f       	add	r25, r25
    1aec:	99 0f       	add	r25, r25
    1aee:	90 7c       	andi	r25, 0xC0	; 192
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	8f 7b       	andi	r24, 0xBF	; 191
    1af4:	89 2b       	or	r24, r25
    1af6:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&led_pin);
    1af8:	ce 01       	movw	r24, r28
    1afa:	02 96       	adiw	r24, 0x02	; 2
    1afc:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_pinInit>
    1b00:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <LED_on>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_on(const led_t *led)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <LED_on+0x6>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <LED_on+0x8>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <LED_on+0x20>
	{
		error_status = E_NOT_OK;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	21 c0       	rjmp	.+66     	; 0x1b74 <LED_on+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1b32:	eb 81       	ldd	r30, Y+3	; 0x03
    1b34:	fc 81       	ldd	r31, Y+4	; 0x04
    1b36:	80 81       	ld	r24, Z
    1b38:	28 2f       	mov	r18, r24
    1b3a:	23 70       	andi	r18, 0x03	; 3
    1b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b40:	80 81       	ld	r24, Z
    1b42:	98 2f       	mov	r25, r24
    1b44:	96 95       	lsr	r25
    1b46:	96 95       	lsr	r25
    1b48:	97 70       	andi	r25, 0x07	; 7
    1b4a:	1a 82       	std	Y+2, r1	; 0x02
    1b4c:	23 70       	andi	r18, 0x03	; 3
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	8c 7f       	andi	r24, 0xFC	; 252
    1b52:	82 2b       	or	r24, r18
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	89 2f       	mov	r24, r25
    1b58:	87 70       	andi	r24, 0x07	; 7
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	99 0f       	add	r25, r25
    1b5e:	99 0f       	add	r25, r25
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	83 7e       	andi	r24, 0xE3	; 227
    1b64:	89 2b       	or	r24, r25
    1b66:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_HIGH);
    1b68:	ce 01       	movw	r24, r28
    1b6a:	02 96       	adiw	r24, 0x02	; 2
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_pinWrite>
    1b72:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <LED_off>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_off(const led_t *led)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <LED_off+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <LED_off+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <LED_off+0x20>
	{
		error_status = E_NOT_OK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
    1ba2:	21 c0       	rjmp	.+66     	; 0x1be6 <LED_off+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1ba4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	23 70       	andi	r18, 0x03	; 3
    1bae:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb2:	80 81       	ld	r24, Z
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	96 95       	lsr	r25
    1bb8:	96 95       	lsr	r25
    1bba:	97 70       	andi	r25, 0x07	; 7
    1bbc:	1a 82       	std	Y+2, r1	; 0x02
    1bbe:	23 70       	andi	r18, 0x03	; 3
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	8c 7f       	andi	r24, 0xFC	; 252
    1bc4:	82 2b       	or	r24, r18
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	89 2f       	mov	r24, r25
    1bca:	87 70       	andi	r24, 0x07	; 7
    1bcc:	98 2f       	mov	r25, r24
    1bce:	99 0f       	add	r25, r25
    1bd0:	99 0f       	add	r25, r25
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	83 7e       	andi	r24, 0xE3	; 227
    1bd6:	89 2b       	or	r24, r25
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_LOW);
    1bda:	ce 01       	movw	r24, r28
    1bdc:	02 96       	adiw	r24, 0x02	; 2
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_pinWrite>
    1be4:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <LED_toggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_toggle(const led_t *led)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <LED_toggle+0x6>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <LED_toggle+0x8>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	11 f4       	brne	.+4      	; 0x1c16 <LED_toggle+0x20>
	{
		error_status = E_NOT_OK;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	20 c0       	rjmp	.+64     	; 0x1c56 <LED_toggle+0x60>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1c16:	eb 81       	ldd	r30, Y+3	; 0x03
    1c18:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1a:	80 81       	ld	r24, Z
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	23 70       	andi	r18, 0x03	; 3
    1c20:	eb 81       	ldd	r30, Y+3	; 0x03
    1c22:	fc 81       	ldd	r31, Y+4	; 0x04
    1c24:	80 81       	ld	r24, Z
    1c26:	98 2f       	mov	r25, r24
    1c28:	96 95       	lsr	r25
    1c2a:	96 95       	lsr	r25
    1c2c:	97 70       	andi	r25, 0x07	; 7
    1c2e:	1a 82       	std	Y+2, r1	; 0x02
    1c30:	23 70       	andi	r18, 0x03	; 3
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	8c 7f       	andi	r24, 0xFC	; 252
    1c36:	82 2b       	or	r24, r18
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	89 2f       	mov	r24, r25
    1c3c:	87 70       	andi	r24, 0x07	; 7
    1c3e:	98 2f       	mov	r25, r24
    1c40:	99 0f       	add	r25, r25
    1c42:	99 0f       	add	r25, r25
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	83 7e       	andi	r24, 0xE3	; 227
    1c48:	89 2b       	or	r24, r25
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinToggle(&led_pin);
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	02 96       	adiw	r24, 0x02	; 2
    1c50:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_pinToggle>
    1c54:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <BUTTON_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_init(const button_t *btn)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <BUTTON_init+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <BUTTON_init+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn)
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <BUTTON_init+0x20>
	{
		error_status = E_NOT_OK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	34 c0       	rjmp	.+104    	; 0x1cee <BUTTON_init+0x88>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id,
				.direction = GPIO_INPUT, .logic = btn->internal_pullup_t};
    1c86:	eb 81       	ldd	r30, Y+3	; 0x03
    1c88:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	23 70       	andi	r18, 0x03	; 3
    1c90:	eb 81       	ldd	r30, Y+3	; 0x03
    1c92:	fc 81       	ldd	r31, Y+4	; 0x04
    1c94:	80 81       	ld	r24, Z
    1c96:	98 2f       	mov	r25, r24
    1c98:	96 95       	lsr	r25
    1c9a:	96 95       	lsr	r25
    1c9c:	97 70       	andi	r25, 0x07	; 7
    1c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca2:	80 81       	ld	r24, Z
    1ca4:	38 2f       	mov	r19, r24
    1ca6:	32 95       	swap	r19
    1ca8:	36 95       	lsr	r19
    1caa:	36 95       	lsr	r19
    1cac:	33 70       	andi	r19, 0x03	; 3
    1cae:	31 70       	andi	r19, 0x01	; 1
    1cb0:	1a 82       	std	Y+2, r1	; 0x02
    1cb2:	23 70       	andi	r18, 0x03	; 3
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	8c 7f       	andi	r24, 0xFC	; 252
    1cb8:	82 2b       	or	r24, r18
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	89 2f       	mov	r24, r25
    1cbe:	87 70       	andi	r24, 0x07	; 7
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	99 0f       	add	r25, r25
    1cc4:	99 0f       	add	r25, r25
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	83 7e       	andi	r24, 0xE3	; 227
    1cca:	89 2b       	or	r24, r25
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	83 2f       	mov	r24, r19
    1cd0:	81 70       	andi	r24, 0x01	; 1
    1cd2:	98 2f       	mov	r25, r24
    1cd4:	92 95       	swap	r25
    1cd6:	99 0f       	add	r25, r25
    1cd8:	99 0f       	add	r25, r25
    1cda:	90 7c       	andi	r25, 0xC0	; 192
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	8f 7b       	andi	r24, 0xBF	; 191
    1ce0:	89 2b       	or	r24, r25
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&btn_pin);
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	02 96       	adiw	r24, 0x02	; 2
    1ce8:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_pinInit>
    1cec:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <BUTTON_read>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_read(const button_t *btn, uint8 *btn_state)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2b 97       	sbiw	r28, 0x0b	; 11
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	9d 83       	std	Y+5, r25	; 0x05
    1d14:	8c 83       	std	Y+4, r24	; 0x04
    1d16:	7f 83       	std	Y+7, r23	; 0x07
    1d18:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnType error_status = E_OK;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_logic_t btn_pin_status;
	if(NULL == btn)
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	11 f4       	brne	.+4      	; 0x1d2a <BUTTON_read+0x2c>
	{
		error_status = E_NOT_OK;
    1d26:	19 82       	std	Y+1, r1	; 0x01
    1d28:	51 c0       	rjmp	.+162    	; 0x1dcc <BUTTON_read+0xce>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id};
    1d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2e:	80 81       	ld	r24, Z
    1d30:	28 2f       	mov	r18, r24
    1d32:	23 70       	andi	r18, 0x03	; 3
    1d34:	ec 81       	ldd	r30, Y+4	; 0x04
    1d36:	fd 81       	ldd	r31, Y+5	; 0x05
    1d38:	80 81       	ld	r24, Z
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	96 95       	lsr	r25
    1d3e:	96 95       	lsr	r25
    1d40:	97 70       	andi	r25, 0x07	; 7
    1d42:	1b 82       	std	Y+3, r1	; 0x03
    1d44:	23 70       	andi	r18, 0x03	; 3
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	8c 7f       	andi	r24, 0xFC	; 252
    1d4a:	82 2b       	or	r24, r18
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    1d4e:	89 2f       	mov	r24, r25
    1d50:	87 70       	andi	r24, 0x07	; 7
    1d52:	98 2f       	mov	r25, r24
    1d54:	99 0f       	add	r25, r25
    1d56:	99 0f       	add	r25, r25
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	83 7e       	andi	r24, 0xE3	; 227
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
		error_status = GPIO_pinRead(&btn_pin, &btn_pin_status);
    1d60:	ce 01       	movw	r24, r28
    1d62:	03 96       	adiw	r24, 0x03	; 3
    1d64:	9e 01       	movw	r18, r28
    1d66:	2e 5f       	subi	r18, 0xFE	; 254
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	b9 01       	movw	r22, r18
    1d6c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_pinRead>
    1d70:	89 83       	std	Y+1, r24	; 0x01
		switch(btn->button_active_t)
    1d72:	ec 81       	ldd	r30, Y+4	; 0x04
    1d74:	fd 81       	ldd	r31, Y+5	; 0x05
    1d76:	80 81       	ld	r24, Z
    1d78:	82 95       	swap	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	87 70       	andi	r24, 0x07	; 7
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3a 87       	std	Y+10, r19	; 0x0a
    1d86:	29 87       	std	Y+9, r18	; 0x09
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	31 f0       	breq	.+12     	; 0x1d9c <BUTTON_read+0x9e>
    1d90:	29 85       	ldd	r18, Y+9	; 0x09
    1d92:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d94:	21 30       	cpi	r18, 0x01	; 1
    1d96:	31 05       	cpc	r19, r1
    1d98:	61 f0       	breq	.+24     	; 0x1db2 <BUTTON_read+0xb4>
    1d9a:	17 c0       	rjmp	.+46     	; 0x1dca <BUTTON_read+0xcc>
		{
		case BUTTON_ACTIVE_HIGH:

			(*btn_state) = btn_pin_status == GPIO_HIGH ? BUTTON_PRESSED : BUTTON_RELEASED;
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	18 86       	std	Y+8, r1	; 0x08
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	11 f0       	breq	.+4      	; 0x1da8 <BUTTON_read+0xaa>
    1da4:	31 e0       	ldi	r19, 0x01	; 1
    1da6:	38 87       	std	Y+8, r19	; 0x08
    1da8:	ee 81       	ldd	r30, Y+6	; 0x06
    1daa:	ff 81       	ldd	r31, Y+7	; 0x07
    1dac:	88 85       	ldd	r24, Y+8	; 0x08
    1dae:	80 83       	st	Z, r24
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <BUTTON_read+0xce>
			break;

		case BUTTON_ACTIVE_LOW:

			(*btn_state) = btn_pin_status == GPIO_LOW ? BUTTON_PRESSED : BUTTON_RELEASED;
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db8:	99 23       	and	r25, r25
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <BUTTON_read+0xc2>
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	2b 87       	std	Y+11, r18	; 0x0b
    1dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc2:	ee 81       	ldd	r30, Y+6	; 0x06
    1dc4:	ff 81       	ldd	r31, Y+7	; 0x07
    1dc6:	80 83       	st	Z, r24
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <BUTTON_read+0xce>
			break;

		default:
			error_status = E_NOT_OK;
    1dca:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dce:	2b 96       	adiw	r28, 0x0b	; 11
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <APP_init>:
/*
 * Description :
 * This function is responsible for initializing the peripherals used
 */
void APP_init(void)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	/* initialize cars LEDs */
	LED_init(&cars_green_led);
    1dea:	80 e8       	ldi	r24, 0x80	; 128
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>
	LED_init(&cars_yellow_led);
    1df2:	81 e8       	ldi	r24, 0x81	; 129
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>
	LED_init(&cars_red_led);
    1dfa:	82 e8       	ldi	r24, 0x82	; 130
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>

	/* initialize pedestrians LEDs */
	LED_init(&pedestrian_green_led);
    1e02:	83 e8       	ldi	r24, 0x83	; 131
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>
	LED_init(&pedestrian_yellow_led);
    1e0a:	84 e8       	ldi	r24, 0x84	; 132
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>
	LED_init(&pedestrian_red_led);
    1e12:	85 e8       	ldi	r24, 0x85	; 133
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LED_init>

	/* configure EXTI0 */
	/* Setting interrupt pin as input, with a pull-up resistor an active-low button */
	button_t pedestrian_btn = {.button_active_t = BUTTON_ACTIVE_LOW, .port_id = PORTD_ID, .pin_id = PIN_2};
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	83 60       	ori	r24, 0x03	; 3
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	83 7e       	andi	r24, 0xE3	; 227
    1e26:	88 60       	ori	r24, 0x08	; 8
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	BUTTON_init(&pedestrian_btn);
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <BUTTON_init>

	/* Set interrupt trigger to rising edge, to handle long press situations */
	INTERRUPT_EXTI0_setTrigger(RISING_EGDE);
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	0e 94 30 07 	call	0xe60	; 0xe60 <INTERRUPT_EXTI0_setTrigger>

	/* enable both global interrupt and extrnal interrupt 0 */
	INTERRUPT_globalInterruptEnable();
    1e3e:	af e5       	ldi	r26, 0x5F	; 95
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ef e5       	ldi	r30, 0x5F	; 95
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	80 68       	ori	r24, 0x80	; 128
    1e4a:	8c 93       	st	X, r24
	INTERRUPT_EXTI0_Enable();
    1e4c:	ab e5       	ldi	r26, 0x5B	; 91
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e5       	ldi	r30, 0x5B	; 91
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 64       	ori	r24, 0x40	; 64
    1e58:	8c 93       	st	X, r24

	/* set callback function for external interrupt 0 */
	INTERRUPT_EXTI0_setCallback(exti0_isr);
    1e5a:	86 e1       	ldi	r24, 0x16	; 22
    1e5c:	90 e1       	ldi	r25, 0x10	; 16
    1e5e:	0e 94 08 08 	call	0x1010	; 0x1010 <INTERRUPT_EXTI0_setCallback>

	/* enable timer0 output compare match interrupt */
	INTERRUPT_TIMER0_OC_ENABLE();
    1e62:	a9 e5       	ldi	r26, 0x59	; 89
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e9 e5       	ldi	r30, 0x59	; 89
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 60       	ori	r24, 0x02	; 2
    1e6e:	8c 93       	st	X, r24
}
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <APP_start>:


void APP_start(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	/* NORMAL MODE */

	/* Ignore state 1 if there is ongoing interrupt request */
	if (!interrupt_flag)
    1e80:	80 91 91 01 	lds	r24, 0x0191
    1e84:	88 23       	and	r24, r24
    1e86:	51 f4       	brne	.+20     	; 0x1e9c <APP_start+0x24>
	{
		/************************ FIRST state: Cars GREEN && Pedestrian RED are ON ********************/
		LED_on(&cars_green_led);
    1e88:	80 e8       	ldi	r24, 0x80	; 128
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
		LED_on(&pedestrian_red_led);
    1e90:	85 e8       	ldi	r24, 0x85	; 133
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

		/* delay for 5 seconds */
		NormalMode_delay_5s();
    1e98:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <NormalMode_delay_5s>
	}else{}
	/**********************************************************************************************/

	/* if pedestrian request was handled, clear interrupt flag */
	if (!pedestrian_request_waiting)
    1e9c:	80 91 92 01 	lds	r24, 0x0192
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <APP_start+0x30>
	{
		interrupt_flag = 0;
    1ea4:	10 92 91 01 	sts	0x0191, r1
	}else{}


	/****************** SECOND state: Cars YELLOW BLINKS && Pedestrian RED still ON ****************/
	/* turn off previous state LEDs, and turn on second state LEDs */
	LED_off(&cars_green_led);
    1ea8:	80 e8       	ldi	r24, 0x80	; 128
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
	LED_on(&cars_yellow_led);
    1eb0:	81 e8       	ldi	r24, 0x81	; 129
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
	LED_on(&pedestrian_red_led);
    1eb8:	85 e8       	ldi	r24, 0x85	; 133
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

	/* blink cars yellow LED for 5 sec */
	NormalMode_carsYellowBlink_5s();
    1ec0:	0e 94 b0 10 	call	0x2160	; 0x2160 <NormalMode_carsYellowBlink_5s>

	LED_off(&cars_yellow_led);
    1ec4:	81 e8       	ldi	r24, 0x81	; 129
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

	/***********************************************************************************************/
	/* Ignore state 1 if there is ongoing interrupt request */
	if (!interrupt_flag)
    1ecc:	80 91 91 01 	lds	r24, 0x0191
    1ed0:	88 23       	and	r24, r24
    1ed2:	d9 f4       	brne	.+54     	; 0x1f0a <APP_start+0x92>
	{
		/****************** THIRD state: Cars RED && Pedestrian GREEN are ON ****************/

		/* turn off previous state LEDs, and turn on second state LEDs */
		LED_off(&cars_yellow_led);
    1ed4:	81 e8       	ldi	r24, 0x81	; 129
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		LED_off(&pedestrian_red_led);
    1edc:	85 e8       	ldi	r24, 0x85	; 133
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		LED_on(&cars_red_led);
    1ee4:	82 e8       	ldi	r24, 0x82	; 130
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
		LED_on(&pedestrian_green_led);
    1eec:	83 e8       	ldi	r24, 0x83	; 131
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

		/* set interrupt_on_red flag */
		interrupt_on_red = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 90 01 	sts	0x0190, r24

		/* delay for 5 seconds */
		NormalMode_delay_5s();
    1efa:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <NormalMode_delay_5s>

		/* if not interrupted at this state, reset the flag */
		if (!interrupt_flag)
    1efe:	80 91 91 01 	lds	r24, 0x0191
    1f02:	88 23       	and	r24, r24
    1f04:	11 f4       	brne	.+4      	; 0x1f0a <APP_start+0x92>
		{
			interrupt_on_red = 0;
    1f06:	10 92 90 01 	sts	0x0190, r1
		}else{}
	}else{}
	/************************************************************************************************/

	/* Ignore state 1 if there is ongoing interrupt request */
	if (!interrupt_flag)
    1f0a:	80 91 91 01 	lds	r24, 0x0191
    1f0e:	88 23       	and	r24, r24
    1f10:	b1 f4       	brne	.+44     	; 0x1f3e <APP_start+0xc6>
	{
		/* FOURTH state: Cars YELLOW BLINKS && Pedestrian RED is ON */
		LED_off(&cars_red_led);
    1f12:	82 e8       	ldi	r24, 0x82	; 130
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		LED_off(&pedestrian_green_led);
    1f1a:	83 e8       	ldi	r24, 0x83	; 131
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

		LED_on(&cars_yellow_led);
    1f22:	81 e8       	ldi	r24, 0x81	; 129
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
		LED_on(&pedestrian_red_led);
    1f2a:	85 e8       	ldi	r24, 0x85	; 133
    1f2c:	91 e0       	ldi	r25, 0x01	; 1
    1f2e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

		/* blink cars yellow LED for 5 sec */
		NormalMode_carsYellowBlink_5s();
    1f32:	0e 94 b0 10 	call	0x2160	; 0x2160 <NormalMode_carsYellowBlink_5s>


		LED_off(&cars_yellow_led);
    1f36:	81 e8       	ldi	r24, 0x81	; 129
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
	/***************************************************************************************************/
	/***************************************************************************************************/

	/* if interrupt is fired "button pressed" */
	/* Pedestrian Mode */
	if (interrupt_flag)
    1f3e:	80 91 91 01 	lds	r24, 0x0191
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <APP_start+0xd0>
    1f46:	6f c0       	rjmp	.+222    	; 0x2026 <APP_start+0x1ae>
	{
		INTERRUPT_EXTI0_Disable(); /* disable external interrupt 0, to handle multi-press situations */
    1f48:	ab e5       	ldi	r26, 0x5B	; 91
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	eb e5       	ldi	r30, 0x5B	; 91
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 7b       	andi	r24, 0xBF	; 191
    1f54:	8c 93       	st	X, r24

		/* Check if interrupt happened when Cars green LED was on */
		if (interrupt_on_red)
    1f56:	80 91 90 01 	lds	r24, 0x0190
    1f5a:	88 23       	and	r24, r24
    1f5c:	59 f0       	breq	.+22     	; 0x1f74 <APP_start+0xfc>
		{

			/* extend that state for 5 seconds */
			PedestrianMode_delay_5s();
    1f5e:	0e 94 8f 10 	call	0x211e	; 0x211e <PedestrianMode_delay_5s>

			/* turn of that state LEDs */
			LED_off(&cars_red_led);
    1f62:	82 e8       	ldi	r24, 0x82	; 130
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
			LED_off(&pedestrian_green_led);
    1f6a:	83 e8       	ldi	r24, 0x83	; 131
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
    1f72:	2c c0       	rjmp	.+88     	; 0x1fcc <APP_start+0x154>
		/* if interrupt happened when Cars yellow or green was on */
		else
		{
			/* the coming state requires both yellow LEDs only to blink*/
			/* Turn off Cars green and Pedestrian red LEDs since they were on when interrupt happened */
			LED_off(&cars_green_led);
    1f74:	80 e8       	ldi	r24, 0x80	; 128
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
			LED_off(&pedestrian_red_led);
    1f7c:	85 e8       	ldi	r24, 0x85	; 133
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

			/* BLINK both Cars && Pedestrian YELLOWS for 5 seconds*/
			LED_on(&cars_yellow_led);
    1f84:	81 e8       	ldi	r24, 0x81	; 129
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
			LED_on(&pedestrian_yellow_led);
    1f8c:	84 e8       	ldi	r24, 0x84	; 132
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

			PedestrianMode_twoYellowBlink_5s();
    1f94:	0e 94 d5 10 	call	0x21aa	; 0x21aa <PedestrianMode_twoYellowBlink_5s>

			LED_off(&cars_yellow_led);
    1f98:	81 e8       	ldi	r24, 0x81	; 129
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
			LED_off(&pedestrian_yellow_led);
    1fa0:	84 e8       	ldi	r24, 0x84	; 132
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

			/* then, SET cars RED && Pedestrian GREEN to ON state for 5 seconds*/
			LED_on(&cars_red_led);
    1fa8:	82 e8       	ldi	r24, 0x82	; 130
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
			LED_on(&pedestrian_green_led);
    1fb0:	83 e8       	ldi	r24, 0x83	; 131
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

			/* delay for 5 seconds */
			PedestrianMode_delay_5s();
    1fb8:	0e 94 8f 10 	call	0x211e	; 0x211e <PedestrianMode_delay_5s>

			LED_off(&cars_red_led);
    1fbc:	82 e8       	ldi	r24, 0x82	; 130
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
			LED_off(&pedestrian_green_led);
    1fc4:	83 e8       	ldi	r24, 0x83	; 131
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		}

		/* after above both conditions */
		/* BLINK both Cars && Pedestrian YELLOWS for 5 seconds*/
		LED_on(&cars_yellow_led);
    1fcc:	81 e8       	ldi	r24, 0x81	; 129
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
		LED_on(&pedestrian_yellow_led);
    1fd4:	84 e8       	ldi	r24, 0x84	; 132
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

		PedestrianMode_twoYellowBlink_5s();
    1fdc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <PedestrianMode_twoYellowBlink_5s>

		LED_off(&cars_yellow_led);
    1fe0:	81 e8       	ldi	r24, 0x81	; 129
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		LED_off(&pedestrian_yellow_led);
    1fe8:	84 e8       	ldi	r24, 0x84	; 132
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

		/* then, SET Cars GREEN && pedestrian RED to ON state for 5 seconds */
		LED_on(&cars_green_led);
    1ff0:	80 e8       	ldi	r24, 0x80	; 128
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>
		LED_on(&pedestrian_red_led);
    1ff8:	85 e8       	ldi	r24, 0x85	; 133
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_on>

		/* delay for 5 seconds */
		PedestrianMode_delay_5s();
    2000:	0e 94 8f 10 	call	0x211e	; 0x211e <PedestrianMode_delay_5s>

		LED_off(&cars_green_led);
    2004:	80 e8       	ldi	r24, 0x80	; 128
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>
		LED_off(&pedestrian_red_led);
    200c:	85 e8       	ldi	r24, 0x85	; 133
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LED_off>

		/* clear pedestrian_request_waiting flag */
		pedestrian_request_waiting = 0;
    2014:	10 92 92 01 	sts	0x0192, r1

		/* Enable external interrupt 0 */
		INTERRUPT_EXTI0_Enable();
    2018:	ab e5       	ldi	r26, 0x5B	; 91
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	eb e5       	ldi	r30, 0x5B	; 91
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
	}
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <exti0_isr>:


/* ISR for external interrupt 0 */
void exti0_isr(void)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	/* when a pedestrian pushes the button */
	interrupt_flag = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 91 01 	sts	0x0191, r24
	pedestrian_request_waiting = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 92 01 	sts	0x0192, r24
	TIMER0_STOP();
    2040:	a3 e5       	ldi	r26, 0x53	; 83
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e3 e5       	ldi	r30, 0x53	; 83
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 7f       	andi	r24, 0xF8	; 248
    204c:	8c 93       	st	X, r24
	ticks = 0;
    204e:	10 92 94 01 	sts	0x0194, r1
    2052:	10 92 93 01 	sts	0x0193, r1
}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <delay_isr>:

/* ISR for timer0 compare match, increments tick counter with every interrupt */
void delay_isr(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	/* increment tick counter with every interrupt */
	ticks++;
    2064:	80 91 93 01 	lds	r24, 0x0193
    2068:	90 91 94 01 	lds	r25, 0x0194
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	90 93 94 01 	sts	0x0194, r25
    2072:	80 93 93 01 	sts	0x0193, r24
}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <cars_yellow_blink_isr>:

/* ISR for timer0 compare match, increments tick counter, toggles cars yellow with every interrupt */
void cars_yellow_blink_isr(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    2084:	80 91 93 01 	lds	r24, 0x0193
    2088:	90 91 94 01 	lds	r25, 0x0194
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	90 93 94 01 	sts	0x0194, r25
    2092:	80 93 93 01 	sts	0x0193, r24
	LED_toggle(&cars_yellow_led);
    2096:	81 e8       	ldi	r24, 0x81	; 129
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LED_toggle>
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <two_yellows_blink_isr>:

/* ISR for timer0 compare match, increments tick counter,
 * 								 toggles both cars yellow and pedestrian yellow LEDs with every interrupt */
void two_yellows_blink_isr(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    20ac:	80 91 93 01 	lds	r24, 0x0193
    20b0:	90 91 94 01 	lds	r25, 0x0194
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	90 93 94 01 	sts	0x0194, r25
    20ba:	80 93 93 01 	sts	0x0193, r24
	LED_toggle(&cars_yellow_led);
    20be:	81 e8       	ldi	r24, 0x81	; 129
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LED_toggle>
	LED_toggle(&pedestrian_yellow_led);
    20c6:	84 e8       	ldi	r24, 0x84	; 132
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LED_toggle>
}
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <NormalMode_delay_5s>:

static void NormalMode_delay_5s(void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	/* delay 5 seconds */
	/* timer 0 can generate a max of 256 ms at a time, configure to calculate 250 ms for 20 times */
	/* increment tick counter with every 250 ms interrupt */
	INTERRUPT_TIMER0_OCF_setCallback(delay_isr);
    20dc:	8e e2       	ldi	r24, 0x2E	; 46
    20de:	90 e1       	ldi	r25, 0x10	; 16
    20e0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <INTERRUPT_TIMER0_OCF_setCallback>
	TIMER0_calc_ms(250);
    20e4:	8a ef       	ldi	r24, 0xFA	; 250
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 ed 05 	call	0xbda	; 0xbda <TIMER0_calc_ms>
	while(!interrupt_flag && ticks < 20);
    20ec:	80 91 91 01 	lds	r24, 0x0191
    20f0:	88 23       	and	r24, r24
    20f2:	39 f4       	brne	.+14     	; 0x2102 <NormalMode_delay_5s+0x2e>
    20f4:	80 91 93 01 	lds	r24, 0x0193
    20f8:	90 91 94 01 	lds	r25, 0x0194
    20fc:	84 31       	cpi	r24, 0x14	; 20
    20fe:	91 05       	cpc	r25, r1
    2100:	a8 f3       	brcs	.-22     	; 0x20ec <NormalMode_delay_5s+0x18>

	/* stop timer and reset ticks */
	ticks = 0;
    2102:	10 92 94 01 	sts	0x0194, r1
    2106:	10 92 93 01 	sts	0x0193, r1
	TIMER0_STOP();
    210a:	a3 e5       	ldi	r26, 0x53	; 83
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e3 e5       	ldi	r30, 0x53	; 83
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	88 7f       	andi	r24, 0xF8	; 248
    2116:	8c 93       	st	X, r24
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <PedestrianMode_delay_5s>:
static void PedestrianMode_delay_5s(void)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	/* delay 5 seconds */
	/* timer 0 can generate a max of 256 ms at a time, configure to calculate 250 ms for 20 times */
	/* increment tick counter with every 250 ms interrupt */
	INTERRUPT_TIMER0_OCF_setCallback(delay_isr);
    2126:	8e e2       	ldi	r24, 0x2E	; 46
    2128:	90 e1       	ldi	r25, 0x10	; 16
    212a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <INTERRUPT_TIMER0_OCF_setCallback>
	TIMER0_calc_ms(250);
    212e:	8a ef       	ldi	r24, 0xFA	; 250
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 ed 05 	call	0xbda	; 0xbda <TIMER0_calc_ms>
	while(ticks < 20);
    2136:	80 91 93 01 	lds	r24, 0x0193
    213a:	90 91 94 01 	lds	r25, 0x0194
    213e:	84 31       	cpi	r24, 0x14	; 20
    2140:	91 05       	cpc	r25, r1
    2142:	c8 f3       	brcs	.-14     	; 0x2136 <PedestrianMode_delay_5s+0x18>

	/* stop timer and reset ticks */
	ticks = 0;
    2144:	10 92 94 01 	sts	0x0194, r1
    2148:	10 92 93 01 	sts	0x0193, r1
	TIMER0_STOP();
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	88 7f       	andi	r24, 0xF8	; 248
    2158:	8c 93       	st	X, r24
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <NormalMode_carsYellowBlink_5s>:

static void NormalMode_carsYellowBlink_5s(void)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	/* timer 0 can generate a max of 256 ms at a time, configure to calculate 250 ms for 20 times */
	/* increment tick counter with every 250 ms interrupt, toggle cars yellow led to get the blink effect */
	TIMER0_calc_ms(250);
    2168:	8a ef       	ldi	r24, 0xFA	; 250
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 ed 05 	call	0xbda	; 0xbda <TIMER0_calc_ms>
	INTERRUPT_TIMER0_OCF_setCallback(cars_yellow_blink_isr);
    2170:	8e e3       	ldi	r24, 0x3E	; 62
    2172:	90 e1       	ldi	r25, 0x10	; 16
    2174:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <INTERRUPT_TIMER0_OCF_setCallback>
	while(!interrupt_flag && ticks < 20);
    2178:	80 91 91 01 	lds	r24, 0x0191
    217c:	88 23       	and	r24, r24
    217e:	39 f4       	brne	.+14     	; 0x218e <NormalMode_carsYellowBlink_5s+0x2e>
    2180:	80 91 93 01 	lds	r24, 0x0193
    2184:	90 91 94 01 	lds	r25, 0x0194
    2188:	84 31       	cpi	r24, 0x14	; 20
    218a:	91 05       	cpc	r25, r1
    218c:	a8 f3       	brcs	.-22     	; 0x2178 <NormalMode_carsYellowBlink_5s+0x18>

	/* stop timer and reset ticks */
	ticks = 0;
    218e:	10 92 94 01 	sts	0x0194, r1
    2192:	10 92 93 01 	sts	0x0193, r1
	TIMER0_STOP();
    2196:	a3 e5       	ldi	r26, 0x53	; 83
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e3 e5       	ldi	r30, 0x53	; 83
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	88 7f       	andi	r24, 0xF8	; 248
    21a2:	8c 93       	st	X, r24
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <PedestrianMode_twoYellowBlink_5s>:


static void PedestrianMode_twoYellowBlink_5s(void)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62

	/* delay 5 seconds */
	/* timer 0 can generate a max of 256 ms at a time, configure to calculate 250 ms for 20 times */
	/* increment tick counter with every 250 ms interrupt, toggle cars yellow led to get the blink effect */
	TIMER0_calc_ms(250);
    21b2:	8a ef       	ldi	r24, 0xFA	; 250
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 ed 05 	call	0xbda	; 0xbda <TIMER0_calc_ms>
	INTERRUPT_TIMER0_OCF_setCallback(two_yellows_blink_isr);
    21ba:	82 e5       	ldi	r24, 0x52	; 82
    21bc:	90 e1       	ldi	r25, 0x10	; 16
    21be:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <INTERRUPT_TIMER0_OCF_setCallback>
	while(ticks < 20);
    21c2:	80 91 93 01 	lds	r24, 0x0193
    21c6:	90 91 94 01 	lds	r25, 0x0194
    21ca:	84 31       	cpi	r24, 0x14	; 20
    21cc:	91 05       	cpc	r25, r1
    21ce:	c8 f3       	brcs	.-14     	; 0x21c2 <PedestrianMode_twoYellowBlink_5s+0x18>

	/* stop timer and reset ticks */
	ticks = 0;
    21d0:	10 92 94 01 	sts	0x0194, r1
    21d4:	10 92 93 01 	sts	0x0193, r1
	TIMER0_STOP();
    21d8:	a3 e5       	ldi	r26, 0x53	; 83
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e3 e5       	ldi	r30, 0x53	; 83
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	88 7f       	andi	r24, 0xF8	; 248
    21e4:	8c 93       	st	X, r24
}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <main>:
 */

#include "APP/app.h"

int main()
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    21f4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <APP_init>
	while (1)
	{
		APP_start();
    21f8:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <APP_start>
    21fc:	fd cf       	rjmp	.-6      	; 0x21f8 <main+0xc>

000021fe <__mulsi3>:
    21fe:	62 9f       	mul	r22, r18
    2200:	d0 01       	movw	r26, r0
    2202:	73 9f       	mul	r23, r19
    2204:	f0 01       	movw	r30, r0
    2206:	82 9f       	mul	r24, r18
    2208:	e0 0d       	add	r30, r0
    220a:	f1 1d       	adc	r31, r1
    220c:	64 9f       	mul	r22, r20
    220e:	e0 0d       	add	r30, r0
    2210:	f1 1d       	adc	r31, r1
    2212:	92 9f       	mul	r25, r18
    2214:	f0 0d       	add	r31, r0
    2216:	83 9f       	mul	r24, r19
    2218:	f0 0d       	add	r31, r0
    221a:	74 9f       	mul	r23, r20
    221c:	f0 0d       	add	r31, r0
    221e:	65 9f       	mul	r22, r21
    2220:	f0 0d       	add	r31, r0
    2222:	99 27       	eor	r25, r25
    2224:	72 9f       	mul	r23, r18
    2226:	b0 0d       	add	r27, r0
    2228:	e1 1d       	adc	r30, r1
    222a:	f9 1f       	adc	r31, r25
    222c:	63 9f       	mul	r22, r19
    222e:	b0 0d       	add	r27, r0
    2230:	e1 1d       	adc	r30, r1
    2232:	f9 1f       	adc	r31, r25
    2234:	bd 01       	movw	r22, r26
    2236:	cf 01       	movw	r24, r30
    2238:	11 24       	eor	r1, r1
    223a:	08 95       	ret

0000223c <__prologue_saves__>:
    223c:	2f 92       	push	r2
    223e:	3f 92       	push	r3
    2240:	4f 92       	push	r4
    2242:	5f 92       	push	r5
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	ca 1b       	sub	r28, r26
    2266:	db 0b       	sbc	r29, r27
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	09 94       	ijmp

00002274 <__epilogue_restores__>:
    2274:	2a 88       	ldd	r2, Y+18	; 0x12
    2276:	39 88       	ldd	r3, Y+17	; 0x11
    2278:	48 88       	ldd	r4, Y+16	; 0x10
    227a:	5f 84       	ldd	r5, Y+15	; 0x0f
    227c:	6e 84       	ldd	r6, Y+14	; 0x0e
    227e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2280:	8c 84       	ldd	r8, Y+12	; 0x0c
    2282:	9b 84       	ldd	r9, Y+11	; 0x0b
    2284:	aa 84       	ldd	r10, Y+10	; 0x0a
    2286:	b9 84       	ldd	r11, Y+9	; 0x09
    2288:	c8 84       	ldd	r12, Y+8	; 0x08
    228a:	df 80       	ldd	r13, Y+7	; 0x07
    228c:	ee 80       	ldd	r14, Y+6	; 0x06
    228e:	fd 80       	ldd	r15, Y+5	; 0x05
    2290:	0c 81       	ldd	r16, Y+4	; 0x04
    2292:	1b 81       	ldd	r17, Y+3	; 0x03
    2294:	aa 81       	ldd	r26, Y+2	; 0x02
    2296:	b9 81       	ldd	r27, Y+1	; 0x01
    2298:	ce 0f       	add	r28, r30
    229a:	d1 1d       	adc	r29, r1
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	ed 01       	movw	r28, r26
    22a8:	08 95       	ret

000022aa <_exit>:
    22aa:	f8 94       	cli

000022ac <__stop_program>:
    22ac:	ff cf       	rjmp	.-2      	; 0x22ac <__stop_program>
